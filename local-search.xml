<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试自动备份和自动打开md编辑器</title>
    <link href="/2022/08/01/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%92%8C%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80md%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2022/08/01/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%E5%92%8C%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80md%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>测试测试自动备份和自动打开md编辑器</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2022/08/01/%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/08/01/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<span id="more"></span>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>环境安装手册</title>
    <link href="/2022/07/29/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/"/>
    <url>/2022/07/29/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<p>配置各种安装环境速查</p><span id="more"></span><h1 id="编程环境安装手册——ubuntu"><a href="#编程环境安装手册——ubuntu" class="headerlink" title="编程环境安装手册——ubuntu"></a>编程环境安装手册——ubuntu</h1><h2 id="Ubuntu系统配置"><a href="#Ubuntu系统配置" class="headerlink" title="Ubuntu系统配置"></a>Ubuntu系统配置</h2><h3 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#修改/etc/apt/目录下的sources.list文件</span><br><span class="hljs-variable">$cd</span> /etc/apt/<br><span class="hljs-comment">#做好备份</span><br><span class="hljs-variable">$sudo</span> <span class="hljs-built_in">mv</span> sources.list sources.list.bakup<br><span class="hljs-comment">#vim创建新的sources.list文件</span><br><span class="hljs-variable">$sudo</span> vim sources.list<br><br><span class="hljs-comment">#配置好文件后执行下面的命令</span><br><span class="hljs-comment">#会访问源列表sources.list里的每个网址，并读取软件列表，然后保存在本地</span><br><span class="hljs-variable">$sudo</span> apt-get update <span class="hljs-comment">#更新软件列表</span><br><span class="hljs-comment">#把本地已安装的软件，与刚下载的软件列表里对应软件进行对比，如果发现已安装的软件版本太低，就会提示你更新。</span><br><span class="hljs-variable">$sudo</span> apt-get upgrade <span class="hljs-comment">#更新软件</span><br><br><span class="hljs-comment">#apt 可以看作 apt-get 和 apt-cache 命令的子集, 可以为包管理提供必要的命令选项。</span><br><span class="hljs-comment">#apt-get 虽然没被弃用，但作为普通用户，还是应该首先使用 apt。</span><br><span class="hljs-comment">#https://blog.csdn.net/liudsl/article/details/79200134</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#ubuntu20.04的阿里云网址</span><br>deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse<br><br>deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><hr><h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><p>ssh分为客户端和服务端程序，最流行的ssh协议实现是OpenSSH。即安装OpenSSH客户端和服务端程序。一般情况下windows作为客户端需要安装OpenSSH客户端程序，ubuntu作为服务端需要安装OpenSSH服务端程序。当然无论是windows还是ubuntu都可以即做客户端又做服务端，只需要安装对应程序即可。</p><h4 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h4><ul><li><p>windows安装OpenSSH程序可在 “设置-&gt;应用-&gt;可选功能-&gt;添加可选功能”中安装，其中有客户端和服务端程序</p></li><li><p>ubuntu作为服务端安装服务端程序</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install openssh-server<br><span class="hljs-comment">#ubuntu启动sshd服务</span><br>--------------------------<br>$ sshd<br><span class="hljs-comment">#上面的命令运行后，如果提示“sshd re-exec requires execution with an absolute path”，就需要使用绝对路径来启动。这是为了防止有人出于各种目的，放置同名软件在$PATH变量指向的目录中，代替真正的 sshd。</span><br>$ /usr/sbin/sshd<br><span class="hljs-comment">#上面的命令运行以后，sshd 自动进入后台，所以命令后面不需要加上&amp;</span><br>--------------------------<br><span class="hljs-comment">#除了直接运行可执行文件，也可以通过 Systemd 启动 sshd。</span><br><span class="hljs-comment"># 启动</span><br>$ sudo systemctl start sshd.service<br><span class="hljs-comment"># 停止</span><br>$ sudo systemctl stop sshd.service<br><span class="hljs-comment"># 重启</span><br>$ sudo systemctl restart sshd.service<br><span class="hljs-comment">#下面的命令让 sshd 在计算机下次启动时自动运行。</span><br>$ sudo systemctl <span class="hljs-built_in">enable</span> sshd.service<br></code></pre></td></tr></table></figure><ul><li>ubuntu作为客户端安装客户端程序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br></code></pre></td></tr></table></figure><ul><li><p>windows作为服务端配置服务端程序</p><p>windows安装好服务端程序后需要进行简单的配置启动服务程序</p></li></ul><h4 id="设置免密登录"><a href="#设置免密登录" class="headerlink" title="设置免密登录"></a>设置免密登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#先生成非对称秘钥</span><br><span class="hljs-variable">$ssh</span>-keygen <span class="hljs-comment">#执行该程序会在 ~/.ssh/ 目录下生成公私钥文件，将公钥文件传到服务器的~/.ssh/authorized_keys文件中即可实现免密登录</span><br><span class="hljs-comment">#ubuntu客户端可以使用下面的命令快速将公钥文件传到服务器，该命令会默认从~/.ssh/目录下去公钥传到服务器对应的~/.ssh/authorized_keys文件中。也可以使用-i参数指定公钥文件</span><br><span class="hljs-variable">$ssh</span>-copy-id user@host<br><span class="hljs-comment">#windows的OpenSSH客户端没有ssh-copy-id可用以下命令代替 注：修改命令中的user@host</span><br>$ <span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub | ssh user@host <span class="hljs-string">&quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span><br>$ <span class="hljs-built_in">chmod</span> 644 ~/.ssh/authorized_keys <span class="hljs-comment">#必要时需要修改服务器端的authorized_keys的权限，即只有文件所有者才能写。如果权限设置不对，SSH 服务器可能会拒绝读取该文件。</span><br></code></pre></td></tr></table></figure><p>为了安全性，启用密钥登录之后，最好关闭服务器的密码登录。对于 OpenSSH，具体方法就是打开服务器 sshd 的配置文件<code>/etc/ssh/sshd_config</code>，将<code>PasswordAuthentication</code>这一项设为<code>no</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PasswordAuthentication no<br></code></pre></td></tr></table></figure><p>修改配置文件以后，不要忘了重新启动 sshd，否则不会生效。</p><h4 id="客户端配置文件"><a href="#客户端配置文件" class="headerlink" title="客户端配置文件"></a>客户端配置文件</h4><p>SSH 客户端的全局配置文件是<code>/etc/ssh/ssh_config</code>（ubuntu），用户个人的配置文件在<code>~/.ssh/config</code>（ubuntu和windows），优先级高于全局配置文件。</p><p>用户个人的配置文件<code>~/.ssh/config</code>，可以按照不同服务器，列出各自的连接参数，从而不必每一次登录都输入重复的参数。下面是一个例子。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host *<br>     Port 2222<br><br>Host remoteserver<br>     HostName remote.example.com<br>     User neo<br>     Port 2112<br></code></pre></td></tr></table></figure><p>上面代码中，<code>Host *</code>表示对所有主机生效，后面的<code>Port 2222</code>表示所有主机的默认连接端口都是2222，这样就不用在登录时特别指定端口了。这里的缩进并不是必需的，只是为了视觉上，易于识别针对不同主机的设置。后面的<code>Host remoteserver</code>表示，下面的设置只对主机<code>remoteserver</code>生效。<code>remoteserver</code>只是一个别名，具体的主机由<code>HostName</code>命令指定，<code>User</code>和<code>Port</code>这两项分别表示用户名和端口。这里的<code>Port</code>会覆盖上面<code>Host *</code>部分的<code>Port</code>设置。以后，登录<code>remote.example.com</code>时，只要执行<code>ssh remoteserver</code>命令，就会自动套用 config 文件里面指定的参数。<br>单个主机的配置格式如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh remoteserver<br><span class="hljs-comment"># 等同于</span><br>$ ssh -p 2112 neo@remote.example.com<br></code></pre></td></tr></table></figure><p><code>Host</code>命令的值可以使用通配符，比如<code>Host *</code>表示对所有主机都有效的设置，<code>Host *.edu</code>表示只对一级域名为<code>.edu</code>的主机有效的设置。它们的设置都可以被单个主机的设置覆盖</p><h4 id="服务端配置文件"><a href="#服务端配置文件" class="headerlink" title="服务端配置文件"></a>服务端配置文件</h4><p>sshd 启动时会自动读取默认的配置文件。如果希望使用其他的配置文件，可以用 sshd 命令的<code>-f</code>参数指定。</p><p>sshd 的配置文件在<code>/etc/ssh</code>（ubuntu）目录，主配置文件是<code>sshd_config</code>，此外还有一些安装时生成的密钥。注意，如果重装 sshd，上面这些密钥都会重新生成，导致客户端重新连接 ssh 服务器时，会跳出警告，拒绝连接。为了避免这种情况，可以在重装 sshd 时，先备份<code>/etc/ssh</code>目录，重装后再恢复这个目录。</p><p>配置文件<code>sshd_config</code>的格式是，每个命令占据一行。每行都是配置项和对应的值，配置项的<strong>大小写不敏感</strong>，与值之间使用空格分隔。配置项中注释只能放在一行的开头，不能放在一行的结尾。</p><p><code>Port</code>指定 sshd 监听的端口，即客户端连接的端口，默认是22（<code>Port 22</code>）。出于安全考虑，可以改掉这个端口（比如<code>Port 8822</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#配置文件可以使用多个`Port`命令，同时监听多个端口。</span><br>Port 22<br>Port 80<br>Port 443<br>Port 8080<br></code></pre></td></tr></table></figure><p>修改配置文件以后，不要忘了重新启动 sshd，否则不会生效。</p><p><a href="https://wangdoc.com/ssh/server.html">其余服务端配置项参看这个链接</a></p><h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>SSH 除了登录服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的通信加密跳板，使得原本不加密的通信变成加密通信。这个功能称为端口转发（port forwarding），又称 SSH 隧道（tunnel）。</p><p>端口转发有两个主要作用：</p><ul><li>将不加密的数据放在 SSH 安全连接里面传输，使得原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。</li><li>作为数据通信的加密跳板，绕过网络防火墙。</li></ul><p>端口转发有三种使用方法：动态转发，本地转发，远程转发。下面逐一介绍。</p><ol><li><p>动态转发</p><p>动态转发指的是，本机与 SSH 服务器之间创建了一个加密连接，然后本机内部针对某个端口的通信，都通过这个加密连接转发。它的一个使用场景就是，访问所有外部网站，都通过 SSH 转发。</p><p>动态转发需要把本地端口绑定到 SSH 服务器。至于 SSH 服务器要去访问哪一个网站，完全是动态的，取决于原始通信，所以叫做动态转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -D local-port tunnel-host -N<br></code></pre></td></tr></table></figure><p>上面命令中，<code>-D</code>表示动态转发，<code>local-port</code>是本地端口，<code>tunnel-host</code>是 SSH 服务器，<code>-N</code>表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。</p><p>举例来说，如果本地端口是<code>2121</code>，那么动态转发的命令就是下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -D 2121 tunnel-host -N<br></code></pre></td></tr></table></figure><p>注意，这种转发采用了 SOCKS5 协议。访问外部网站时，需要把 HTTP 请求转成 SOCKS5 协议，才能把本地端口的请求转发出去。</p><p>下面是 SSH 隧道<strong>建立后</strong>的一个使用实例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl -x socks5://localhost:2121 http://www.example.com<br></code></pre></td></tr></table></figure><p>上面命令中，curl 的<code>-x</code>参数指定代理服务器，即通过 SOCKS5 协议的本地<code>2121</code>端口，访问<code>http://www.example.com</code>。</p><p>如果经常使用动态转发，可以将设置写入 SSH 客户端的用户个人配置文件（<code>~/.ssh/config</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DynamicForward tunnel-host:local-port<br></code></pre></td></tr></table></figure></li><li><p>本地转发</p><p>本地转发（local forwarding）指的是，SSH 服务器作为中介的跳板机，建立本地计算机与特定目标网站之间的加密连接。本地转发是在本地计算机的 SSH 客户端建立的转发规则。</p><p>它会指定一个本地端口（local-port），所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host），然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -L local-port:target-host:target-port tunnel-host<br></code></pre></td></tr></table></figure><p>举例来说，现在有一台 SSH 跳板机<code>tunnel-host</code>，我们想要通过这台机器，在本地<code>2121</code>端口与目标网站<code>www.example.com</code>的80端口之间建立 SSH 隧道，就可以写成下面这样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -L 2121:www.example.com:80 tunnel-host -N<br></code></pre></td></tr></table></figure><p>然后，访问本机的<code>2121</code>端口，就是访问<code>www.example.com</code>的80端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl http://localhost:2121<br></code></pre></td></tr></table></figure><p>注意，本地端口转发采用 HTTP 协议，不用转成 SOCKS5 协议。</p></li><li><p>远程转发</p><p>远程转发指的是在远程 SSH 服务器建立的转发规则。</p><p>它跟本地转发正好反过来。建立本地计算机到远程计算机的 SSH 隧道以后，本地转发是通过本地计算机访问远程计算机，而远程转发则是通过远程计算机访问本地计算机。它的命令格式如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -R remote-port:target-host:target-port -N remotehost<br></code></pre></td></tr></table></figure><p><strong>远程转发主要针对内网的情况</strong>。下面举两个例子。</p><p>第一个例子是内网某台服务器<code>localhost</code>在 80 端口开了一个服务，可以通过远程转发将这个 80 端口，映射到具有公网 IP 地址的<code>my.public.server</code>服务器的 8080 端口，使得访问<code>my.public.server:8080</code>这个地址，就可以访问到那台内网服务器的 80 端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -R 8080:localhost:80 -N my.public.server<br></code></pre></td></tr></table></figure><p>上面命令是在内网<code>localhost</code>服务器上执行，建立从<code>localhost</code>到<code>my.public.server</code>的 SSH 隧道。运行以后，用户访问<code>my.public.server:8080</code>，就会自动映射到<code>localhost:80</code>。</p><p>第二个例子是本地计算机<code>local</code>在外网，SSH 跳板机和目标服务器<code>my.private.server</code>都在内网，必须通过 SSH 跳板机才能访问目标服务器。但是，本地计算机<code>local</code>无法访问内网之中的 SSH 跳板机，而 SSH 跳板机可以访问本机计算机。</p><p>由于本机无法访问内网 SSH 跳板机，就无法从外网发起 SSH 隧道，建立端口转发。必须反过来，从 SSH 跳板机发起隧道，建立端口转发，这时就形成了远程端口转发。跳板机执行下面的命令，绑定本地计算机<code>local</code>的<code>2121</code>端口，去访问<code>my.private.server:80</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -R 2121:my.private.server:80 -N <span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure><p>上面命令是在 SSH 跳板机上执行的，建立跳板机到<code>local</code>的隧道，并且这条隧道的出口映射到<code>my.private.server:80</code>。</p><p>显然，远程转发要求本地计算机<code>local</code>也安装了 SSH 服务器，这样才能接受 SSH 跳板机的远程登录。</p><p>执行上面的命令以后，跳板机到<code>local</code>的隧道已经建立了。然后，就可以从本地计算机访问目标服务器了，即在本机执行下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl http://localhost:2121<br></code></pre></td></tr></table></figure><p>本机执行上面的命令以后，就会输出服务器<code>my.private.server</code>的 80 端口返回的内容。</p><p>如果经常执行远程端口转发，可以将设置写入 SSH 客户端的用户个人配置文件（<code>~/.ssh/config</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host remote-forward<br>  HostName test.example.com<br>  RemoteForward remote-port target-host:target-port<br></code></pre></td></tr></table></figure><p>完成上面的设置后，执行下面的命令就会建立远程转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -N remote-forward<br><br><span class="hljs-comment"># 等同于</span><br>$ ssh -R remote-port:target-host:target-port -N test.example.com<br></code></pre></td></tr></table></figure></li></ol><h4 id="scp传输文件"><a href="#scp传输文件" class="headerlink" title="scp传输文件"></a>scp传输文件</h4><p><a href="https://wangdoc.com/ssh/scp.html">scp 命令 - SSH 教程 - 网道 (wangdoc.com)</a></p><hr><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><hr><h2 id="go"><a href="#go" class="headerlink" title="go"></a>go</h2><hr><h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><p>使用NVM安装Node.js，NVM可以帮助我们方便的在Node的不同版本之间进行切换，这样我们就可以同时工作在不同的项目上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># To download and install the nvm script run:</span><br><span class="hljs-comment"># 下载并安装nvm脚本：</span><br><br>$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash<br><span class="hljs-comment">#上面的网址打不开极有可能是被墙了，里面其实就是一个安装脚本，手动翻墙下载之后用bash执行以下即可</span><br><span class="hljs-comment"># close and reopen the terminal or run the commands to add the path to nvm script to the current shell session.</span><br><span class="hljs-comment"># 切记nvm安装完毕，要么重新打开终端，要么设置nvm环境变量：</span><br><br><span class="hljs-comment"># Using nvm install node</span><br><span class="hljs-comment"># default install npm</span><br><span class="hljs-comment"># 使用nvm安装node：</span><br>$ nvm install node 8.0.0<br>$ nvm install node 10.0.0<br><br><span class="hljs-comment">#To list installed Node.js versions type:</span><br><span class="hljs-comment">#显示已经安装node版本：</span><br>$ nvm <span class="hljs-built_in">ls</span><br><br><span class="hljs-comment">#You can change the currently active version with:</span><br><span class="hljs-comment">#选择使用node版本，这里使用了10.0.0版本：</span><br>$ nvm use 10.0.0<br></code></pre></td></tr></table></figure><p>node版本维护可以参照官方文档： <a href="https://nodejs.org/en/about/releases/">https://nodejs.org/en/about/releases/</a></p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>[docker安装参考](<a href="https://learnblockchain.cn/books/enterprise/chapter3_02_part1">https://learnblockchain.cn/books/enterprise/chapter3_02_part1</a> hyperledger_fabric_network_prerequisites.html#hyperledger-fabric-网络体验-系统环境配置)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#卸载旧版本的docker，如果安装了的话</span><br>$ sudo apt-get remove docker docker-engine docker.io containerd runc<br><span class="hljs-comment">#使用脚本自动安装最新版docker</span><br>$ curl -fsSL https://get.docker.com -o get-docker.sh<br>$ sudo sh get-docker.sh<br><span class="hljs-comment">#Ubuntu安装好之后docker会自动启动，centos需要使用systemctl或者service手动启动docker服务</span><br></code></pre></td></tr></table></figure><p>建立docker组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo groupadd docker<br></code></pre></td></tr></table></figure><p>将当前用户加入 docker 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo usermod -aG docker <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure><p>执行上述用户组的添加操作是为了给当前用户运行docker时赋予root权限，这样执行docker命令的时候就不需要添加sudo了，这是docker的默认配置。</p><p>国内下载镜像的速度比较慢，可以使用国内镜像加速器。具体方式修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json使用加速器。下面以阿里云加速器地址为例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo <span class="hljs-built_in">mkdir</span> -p /etc/docker<br>$ sudo <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br><span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://hnm*****.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br>$ sudo systemctl daemon-reload<br>$ sudo systemctl restart docker<br></code></pre></td></tr></table></figure><p>镜像加速器地址可以从阿里云网站获取。</p><p>官网地址： <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><p>Docker compose的安装可以采用如下命令： 官方文档：<a href="https://docs.docker.com/compose/install/">https://docs.docker.com/compose/install/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Run this command to download the current stable release of Docker</span><br><span class="hljs-comment"># compose:</span><br><span class="hljs-variable">$sudo</span> curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.25.3/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br><br><span class="hljs-comment"># Apply executable permissions to the binary:</span><br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/best_luxi/article/details/122648473">几款 Docker 图形化工具</a></p><hr><h2 id="fabric"><a href="#fabric" class="headerlink" title="fabric"></a>fabric</h2>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习笔记</title>
    <link href="/2021/02/16/MySQL%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/16/MySQL%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL笔记"><a href="#MySQL笔记" class="headerlink" title="MySQL笔记"></a>MySQL笔记</h1><span id="more"></span><h3 id="1、sql、DB、DBMS？"><a href="#1、sql、DB、DBMS？" class="headerlink" title="1、sql、DB、DBMS？"></a>1、sql、DB、DBMS？</h3><pre><code class="hljs">DB:     DataBase（数据库，数据库实际上在硬盘上以文件的形式存在）DBMS:     DataBase Management System（数据库管理系统，常见的有：MySQL Oracle DB2 Sybase SqlServer...）SQL:     结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品。    SQL属于高级语言。只要能看懂英语单词的，写出来的sql语句，可以读懂什么意思。    SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行sql。（sql语句的编译由DBMS完成。）DBMS负责执行sql语句，通过执行sql语句来操作DB当中的数据。DBMS -(执行)-&gt; SQL -(操作)-&gt; DB</code></pre><h3 id="2、什么是表？"><a href="#2、什么是表？" class="headerlink" title="2、什么是表？"></a>2、什么是表？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">表：table是数据库的基本组成单元，所有的数据都以表格的形式组织，目的是可读性强。<br>一个表包括行和列：<br>行：被称为 数据/记录(data)<br>列：被称为 字段(column)<br><br>学号(int)姓名(varchar)年龄(int)<br>------------------------------------<br>110张三20<br>120李四21<br><br>每一个字段应该包括哪些属性？<br>字段名（学号）、数据类型（int）、相关的约束（是否缺省）。<br></code></pre></td></tr></table></figure><h3 id="3、SQL语句分类"><a href="#3、SQL语句分类" class="headerlink" title="3、SQL语句分类"></a>3、SQL语句分类</h3><p>​DQL（数据查询语言）: 查询语句，凡是<code>select</code>语句都是DQL。<br>​DML（数据操作语言）：<code>insert delete update</code>，对<strong>表当中的数据</strong>进行增删改。<br>​DDL（数据定义语言）：<code>create drop alter</code>，对<strong>表结构</strong>的增删改。<br>​TCL（事务控制语言）：<code>commit</code>提交事务，<code>rollback</code> 回滚事务。(TCL中的T是Transaction)<br>​DCL（数据控制语言）: <code>grant</code>授权、<code>revoke</code>撤销权限等。</p><h3 id="4、MySQL命令"><a href="#4、MySQL命令" class="headerlink" title="4、MySQL命令"></a>4、MySQL命令</h3><h4 id="1、导入数据"><a href="#1、导入数据" class="headerlink" title="1、导入数据"></a>1、导入数据</h4><p>​第一步：登录mysql数据库管理系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dos命令窗口：<br>mysql -uroot -p333<br></code></pre></td></tr></table></figure><p>​第二步：查看有哪些数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases; (这个不是SQL语句，属于MySQL的命令。)<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| test               |<br>+--------------------+<br></code></pre></td></tr></table></figure><p>​第三步：创建属于我们自己的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database bjpowernode; (这个不是SQL语句，属于MySQL的命令。)<br></code></pre></td></tr></table></figure><p>​第四步：使用bjpowernode数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use bjpowernode; (这个不是SQL语句，属于MySQL的命令。)<br></code></pre></td></tr></table></figure><p>第五步：查看当前使用的数据库中有哪些表？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show tables; (这个不是SQL语句，属于MySQL的命令。)<br></code></pre></td></tr></table></figure><p>​第六步：初始化数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; source D:\course\05-MySQL\resources\bjpowernode.sql<br>注意：数据初始化完成之后，有三张表：<br>+-----------------------+<br>| Tables_in_bjpowernode |<br>+-----------------------+<br>| dept                  |<br>| emp                   |<br>| salgrade              |<br>+-----------------------+<br></code></pre></td></tr></table></figure><h4 id="2、sql脚本"><a href="#2、sql脚本" class="headerlink" title="2、sql脚本"></a>2、sql脚本</h4><p>bjpowernode.sql，这个文件以sql结尾，这样的文件被称为“sql脚本”。什么是sql脚本呢？</p><p>​当一个文件的扩展名是.sql，并且该文件中编写了大量的sql语句，我们称这样的文件为sql脚本。<br>​注意：直接使用source命令可以执行sql脚本。<br>​sql脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。</p><h4 id="3、删除数据库"><a href="#3、删除数据库" class="headerlink" title="3、删除数据库"></a>3、删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database bjpowernode;<br></code></pre></td></tr></table></figure><h4 id="4、查看表结构："><a href="#4、查看表结构：" class="headerlink" title="4、查看表结构："></a>4、查看表结构：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; use bjpowernode;<br>mysql&gt; show tables;<br>+-----------------------+<br>| Tables_in_bjpowernode |<br>+-----------------------+<br>| dept                  |   (部门表)<br>| emp                   |   (员工表)<br>| salgrade              |   (工资等级表)<br>+-----------------------+<br><br>mysql&gt; desc dept;  #查看表结构(部门表)<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| DEPTNO | int(2)      | NO   | PRI | NULL    |       |部门编号<br>| DNAME  | varchar(14) | YES  |     | NULL    |       |部门名称<br>| LOC    | varchar(13) | YES  |     | NULL    |       |部门位置<br>+--------+-------------+------+-----+---------+-------+<br></code></pre></td></tr></table></figure><h4 id="5、表中的数据？"><a href="#5、表中的数据？" class="headerlink" title="5、表中的数据？"></a>5、表中的数据？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from emp;#查看表中数据(部门表)<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br><br>mysql&gt; select * from dept;#查看表中数据(员工表)<br>+--------+------------+----------+<br>| DEPTNO | DNAME      | LOC      |<br>+--------+------------+----------+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+--------+------------+----------+<br><br>mysql&gt; select * from salgrade;#查看表中数据(工资等级表)<br>+-------+-------+-------+<br>| GRADE | LOSAL | HISAL |<br>+-------+-------+-------+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+-------+-------+-------+<br></code></pre></td></tr></table></figure><h4 id="6、常用命令？"><a href="#6、常用命令？" class="headerlink" title="6、常用命令？"></a>6、常用命令？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select database(); #查看当前使用的是哪个数据库<br>+-------------+<br>| database()  |<br>+-------------+<br>| bjpowernode |<br>+-------------+<br><br>mysql&gt; select version(); #查看mysql的版本号。<br>+-----------+<br>| version() |<br>+-----------+<br>| 5.5.62    |<br>+-----------+<br><br>\c   #mysql命令，结束一条语句。<br>exit #mysql命令，退出mysql。<br></code></pre></td></tr></table></figure><h4 id="7、查看创建表的语句："><a href="#7、查看创建表的语句：" class="headerlink" title="7、查看创建表的语句："></a>7、查看创建表的语句：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create table emp;<br></code></pre></td></tr></table></figure><p>​</p><h3 id="5、SQL语句"><a href="#5、SQL语句" class="headerlink" title="5、SQL语句"></a>5、SQL语句</h3><p>sql语句不区分大小写，但是表中的数据是有大小写区分的，虽然mysql中用小写也能查询出大写的数据，但是对于Oracle来说是严格区分大小写的，用小写查不出大写数据。相对来说MySQL的语法是松散的不那么严格</p><h4 id="5-1、数据查询语句（DQL）"><a href="#5-1、数据查询语句（DQL）" class="headerlink" title="5.1、数据查询语句（DQL）"></a>5.1、数据查询语句（DQL）</h4><h5 id="1、简单的查询语句"><a href="#1、简单的查询语句" class="headerlink" title="1、简单的查询语句"></a>1、简单的查询语句</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs mysql">语法格式：<br>select 字段名1,字段名2,字段名3,.... from 表名;<br><br>提示：<br>1、任何一条sql语句以“;”结尾。<br>2、sql语句不区分大小写。<br><br>查询员工的年薪？（字段可以参与数学运算。）<br>select ename,sal * 12 from emp;<br>+--------+----------+<br>| ename  | sal * 12 |<br>+--------+----------+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 19200.00 |<br>| WARD   | 15000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 15000.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+--------+----------+<br><br>给查询结果的列重命名？<br>select ename,sal * 12 as yearsal from emp;<br><br>别名中有中文？<br>select ename,sal * 12 as 年薪 from emp; # 错误<br>select ename,sal * 12 as &#x27;年薪&#x27; from emp;<br>#可以使用中文但是必须用字符串表示，sql中的字符串使用单引号虽然在mysql当中可以使用双引号但是为了通用性要使用单引号<br>#注意：标准sql语句中要求字符串使用单引号括起来。虽然mysql支持双引号，尽量别用。<br>+--------+----------+<br>| ename  | 年薪        |<br>+--------+----------+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 19200.00 |<br>| WARD   | 15000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 15000.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+--------+----------+<br><br>as关键字可以省略？<br>mysql&gt; select empno,ename,sal * 12 yearsal from emp;<br>+-------+--------+----------+<br>| empno | ename  | yearsal  |<br>+-------+--------+----------+<br>|  7369 | SMITH  |  9600.00 |<br>|  7499 | ALLEN  | 19200.00 |<br>|  7521 | WARD   | 15000.00 |<br>|  7566 | JONES  | 35700.00 |<br>|  7654 | MARTIN | 15000.00 |<br>|  7698 | BLAKE  | 34200.00 |<br>|  7782 | CLARK  | 29400.00 |<br>|  7788 | SCOTT  | 36000.00 |<br>|  7839 | KING   | 60000.00 |<br>|  7844 | TURNER | 18000.00 |<br>|  7876 | ADAMS  | 13200.00 |<br>|  7900 | JAMES  | 11400.00 |<br>|  7902 | FORD   | 36000.00 |<br>|  7934 | MILLER | 15600.00 |<br>+-------+--------+----------+<br><br>查询所有字段？<br>select * from emp; // 实际开发中不建议使用*，效率较低。<br></code></pre></td></tr></table></figure><h5 id="2、条件查询。"><a href="#2、条件查询。" class="headerlink" title="2、条件查询。"></a>2、条件查询。</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs mysql">语法格式：<br>select 字段名1,字段名2,... from 表名 where 条件;<br>执行顺序：先 from，然后 where，最后 select<br><br>查询工资等于5000的员工姓名？<br>select ename from emp where sal = 5000;<br>+-------+<br>| ename |<br>+-------+<br>| KING  |<br>+-------+<br><br>查询SMITH的工资？<br>select sal from emp where ename = &#x27;SMITH&#x27;;#字符串使用单引号括起来。SMITH是一个varchar字符串<br>+--------+<br>| sal    |<br>+--------+<br>| 800.00 |<br>+--------+<br>找出工资高于3000的员工？<br>select ename,sal from emp where sal &gt; 3000;<br>select ename,sal from emp where sal &gt;= 3000;<br>select ename,sal from emp where sal &lt; 3000;<br>select ename,sal from emp where sal &lt;= 3000;<br><br>找出工资不等于3000的？<br>select ename,sal from emp where sal &lt;&gt; 3000;<br>select ename,sal from emp where sal != 3000;<br><br>找出工资在1100和3000之间的员工，包括1100和3000？<br>select ename,sal from emp where sal &gt;= 1100 and sal &lt;= 3000;<br>select ename,sal from emp where sal between 1100 and 3000; # between...and...是闭区间 [1100 ~ 3000]<br>select ename,sal from emp where sal between 3000 and 1100; # 查询不到任何数据<br>between and #在使用的时候必须左小右大。<br>between and #除了可以使用在数字方面之外，还可以使用在字符串方面。<br>select ename from emp where ename between &#x27;A&#x27; and &#x27;C&#x27;;<br>+-------+<br>| ename |<br>+-------+<br>| ALLEN |<br>| BLAKE |<br>| ADAMS |<br>+-------+<br>select ename from emp where ename between &#x27;A&#x27; and &#x27;D&#x27;; #左闭右开。<br><br>找出哪些人津贴为NULL？<br>在数据库当中NULL不是一个值，代表什么也没有，为空。<br>空不是一个值，不能用等号衡量。<br>必须使用 is null或者is not null<br>select ename,sal,comm from emp where comm is null;<br>+--------+---------+------+<br>| ename  | sal     | comm |<br>+--------+---------+------+<br>| SMITH  |  800.00 | NULL |<br>| JONES  | 2975.00 | NULL |<br>| BLAKE  | 2850.00 | NULL |<br>| CLARK  | 2450.00 | NULL |<br>| SCOTT  | 3000.00 | NULL |<br>| KING   | 5000.00 | NULL |<br>| ADAMS  | 1100.00 | NULL |<br>| JAMES  |  950.00 | NULL |<br>| FORD   | 3000.00 | NULL |<br>| MILLER | 1300.00 | NULL |<br>+--------+---------+------+<br>select ename,sal,comm from emp where comm = null;#如果使用=查询null那么结果一定是空<br>Empty set (0.00 sec)<br><br>找出哪些人津贴不为NULL？<br>select ename,sal,comm from emp where comm is not null;<br>+--------+---------+---------+<br>| ename  | sal     | comm    |<br>+--------+---------+---------+<br>| ALLEN  | 1600.00 |  300.00 |<br>| WARD   | 1250.00 |  500.00 |<br>| MARTIN | 1250.00 | 1400.00 |<br>| TURNER | 1500.00 |    0.00 |<br>+--------+---------+---------+<br><br>找出哪些人没有津贴？<br>select ename,sal,comm from emp where comm is null or comm = 0;<br>+--------+---------+------+<br>| ename  | sal     | comm |<br>+--------+---------+------+<br>| SMITH  |  800.00 | NULL |<br>| JONES  | 2975.00 | NULL |<br>| BLAKE  | 2850.00 | NULL |<br>| CLARK  | 2450.00 | NULL |<br>| SCOTT  | 3000.00 | NULL |<br>| KING   | 5000.00 | NULL |<br>| TURNER | 1500.00 | 0.00 |<br>| ADAMS  | 1100.00 | NULL |<br>| JAMES  |  950.00 | NULL |<br>| FORD   | 3000.00 | NULL |<br>| MILLER | 1300.00 | NULL |<br>+--------+---------+------+<br><br>找出工作岗位是MANAGER和SALESMAN的员工？<br>select ename,job from emp where job = &#x27;MANAGER&#x27; or job = &#x27;SALESMAN&#x27;;<br>+--------+----------+<br>| ename  | job      |<br>+--------+----------+<br>| ALLEN  | SALESMAN |<br>| WARD   | SALESMAN |<br>| JONES  | MANAGER  |<br>| MARTIN | SALESMAN |<br>| BLAKE  | MANAGER  |<br>| CLARK  | MANAGER  |<br>| TURNER | SALESMAN |<br>+--------+----------+<br><br>and 和 or联合起来用：找出薪资大于1000的并且部门编号是20或30部门的员工。<br>select ename,sal,deptno from emp where sal &gt; 1000 and deptno = 20 or deptno = 30; # 错误的<br>select ename,sal,deptno from emp where sal &gt; 1000 and (deptno = 20 or deptno = 30); # 正确的。<br>#注意：当运算符的优先级不确定的时候加小括号。无论and和or的位置如何and的优先级总是高于or<br><br>in 等同于 or：找出工作岗位是MANAGER和SALESMAN的员工？<br>select ename,job from emp where job = &#x27;SALESMAN&#x27; or job = &#x27;MANAGER&#x27;;<br>select ename,job from emp where job in(&#x27;SALESMAN&#x27;, &#x27;MANAGER&#x27;);<br>select ename,job from emp where sal in(800, 5000); # in后面的值不是区间，是具体的值。<br>+-------+-----------+<br>| ename | job       |<br>+-------+-----------+<br>| SMITH | CLERK     |<br>| KING  | PRESIDENT |<br>+-------+-----------+<br><br>not in: 不在这几个值当中。<br>select ename,job from emp where sal not in(800, 5000);<br><br>模糊查询like ? <br> 找出名字当中含有O的？<br>（在模糊查询当中，必须掌握两个特殊的符号，一个是%，一个是_）<br> %代表任意多个字符，_代表任意1个字符。<br>select ename from emp where ename like &#x27;%O%&#x27;;<br>+-------+<br>| ename |<br>+-------+<br>| JONES |<br>| SCOTT |<br>| FORD  |<br>+-------+<br>找出名字中第二个字母是A的？<br>select ename from emp where ename like &#x27;_A%&#x27;;<br>+--------+<br>| ename  |<br>+--------+<br>| WARD   |<br>| MARTIN |<br>| JAMES  |<br>+--------+<br>找出名字中有下划线的？<br>mysql&gt; select * from t_user;<br>+------+----------+<br>| id   | name     |<br>+------+----------+<br>|    1 | zhangsan |<br>|    2 | lisi     |<br>|    3 | WANG_WU  |<br>+------+----------+<br>select name from t_user where name like &#x27;%_%&#x27;;<br>+----------+<br>| name     |<br>+----------+<br>| zhangsan |<br>| lisi     |<br>| WANG_WU  |<br>+----------+<br>select name from t_user where name like &#x27;%\_%&#x27;;<br>+---------+<br>| name    |<br>+---------+<br>| WANG_WU |<br>+---------+<br><br>找出名字中最后一个字母是T的？<br>select ename from emp where ename like &#x27;%T&#x27;;<br>+-------+<br>| ename |<br>+-------+<br>| SCOTT | <br>+-------+<br></code></pre></td></tr></table></figure><h5 id="3、排序（升序、降序）"><a href="#3、排序（升序、降序）" class="headerlink" title="3、排序（升序、降序）"></a>3、排序（升序、降序）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs mysql">按照工资升序，找出员工名和薪资？<br>select ename,sal from emp order by sal;<br>    +--------+---------+<br>    | ename  | sal     |<br>    +--------+---------+<br>    | SMITH  |  800.00 |<br>    | JAMES  |  950.00 |<br>    | ADAMS  | 1100.00 |<br>    | WARD   | 1250.00 |<br>    | MARTIN | 1250.00 |<br>    | MILLER | 1300.00 |<br>    | TURNER | 1500.00 |<br>    | ALLEN  | 1600.00 |<br>    | CLARK  | 2450.00 |<br>    | BLAKE  | 2850.00 |<br>    | JONES  | 2975.00 |<br>    | FORD   | 3000.00 |<br>    | SCOTT  | 3000.00 |<br>    | KING   | 5000.00 |<br>    +--------+---------+<br><br>注意：默认是升序。怎么指定升序或者降序呢？asc表示升序，desc表示降序。<br>select ename , sal from emp order by sal; // 升序<br>select ename , sal from emp order by sal asc; // 升序<br>select ename , sal from emp order by sal desc; // 降序。<br><br>按照工资的降序排列，当工资相同的时候再按照名字的升序排列。<br>select ename,sal from emp order by sal desc;<br>select ename,sal from emp order by sal desc , ename asc;<br>注意：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。<br><br>找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列。<br>select ename,job,sal from emp where job = &#x27;SALESMAN&#x27; order by sal desc;<br>+--------+----------+---------+<br>| ename  | job      | sal     |<br>+--------+----------+---------+<br>| ALLEN  | SALESMAN | 1600.00 |<br>| TURNER | SALESMAN | 1500.00 |<br>| WARD   | SALESMAN | 1250.00 |<br>| MARTIN | SALESMAN | 1250.00 |<br>+--------+----------+---------+<br><br>select <br>字段3<br>from<br>表名  1<br>where<br>条件2<br>order by<br>.... 4<br><br># 执行顺序是1、2、3、4; order by是最后执行的。最后排序输出<br>select ename,sal as salary from emp order by salary;<br></code></pre></td></tr></table></figure><h5 id="4、分组函数"><a href="#4、分组函数" class="headerlink" title="4、分组函数"></a>4、分组函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs mysql">count 计数<br>sum 求和<br>avg 平均值<br>max 最大值<br>min 最小值<br>记住：分组函数一共5个所有的分组函数都是对“某一组”数据进行操作的。分组函数自动忽略NULL。<br><br>找出工资总和？<br>select sum(sal) from emp;<br>找出最高工资？<br>select max(sal) from emp;<br>找出最低工资？<br>select min(sal) from emp;<br>找出平均工资？<br>select avg(sal) from emp;<br>找出总人数？<br>select count(*) from emp;<br>select count(ename) from emp;<br>分组函数还有另一个名字：多行处理函数。<br>多行处理函数的特点：输入多行，最终输出的结果是1行。<br>select count(comm) from emp;<br>+-------------+<br>| count(comm) |<br>+-------------+<br>|           4 |<br>+-------------+<br><br>select sum(comm) from emp;<br>+-----------+<br>| sum(comm) |<br>+-----------+<br>|   2200.00 |<br>+-----------+<br><br>select sum(comm) from emp where comm is not null; # 不需要额外添加这个过滤条件。sum函数自动忽略NULL。 &amp;&amp;&amp;笔试重点<br><br>找出工资高于平均工资的员工？<br>select avg(sal) from emp; # 平均工资<br>+-------------+<br>| avg(sal)    |<br>+-------------+<br>| 2073.214286 |<br>+-------------+<br><br>select ename,sal from emp where sal &gt; avg(sal); #ERROR 1111 (HY000): Invalid use of group function<br>思考以上的错误信息：无效的使用了分组函数？<br>原因：SQL语句当中有一个语法规则，分组函数不可直接使用在where子句当中。<br>怎么解释？<br>因为 group by是在 where 执行之后才会执行的。（参看第6条 group by 和 having）<br>...<br>...<br>...<br>select 5 from 1 where 2 group by 3 having 4 order by 6<br># 在1那张表里查，经过2条件过滤之后，3分组，分组之后不满意再进行4过滤，之后5查出来，最后6排序输出<br><br>找出工资高于平均工资的员工？<br>第一步：找出平均工资<br>select avg(sal) from emp;<br>+-------------+<br>| avg(sal)    |<br>+-------------+<br>| 2073.214286 |<br>+-------------+<br>第二步：找出高于平均工资的员工<br>select ename,sal from emp where sal &gt; 2073.214286;<br>+-------+---------+<br>| ename | sal     |<br>+-------+---------+<br>| JONES | 2975.00 |<br>| BLAKE | 2850.00 |<br>| CLARK | 2450.00 |<br>| SCOTT | 3000.00 |<br>| KING  | 5000.00 |<br>| FORD  | 3000.00 |<br>+-------+---------+<br>select ename,sal from emp where sal &gt; (select avg(sal) from emp);<br>#算出结果之后再套进去<br><br>count(*)和count(具体的某个字段)，他们有什么区别？# &amp;&amp;&amp;笔试重点<br>count(*):不是统计某个字段中数据的个数，而是统计总记录条数。（和某个字段无关）<br>count(comm): 表示统计comm字段中不为NULL的数据总数量。<br><br>分组函数也能组合起来用：<br>select count(*),sum(sal),avg(sal),max(sal),min(sal) from emp;<br>+----------+----------+-------------+----------+----------+<br>| count(*) | sum(sal) | avg(sal)    | max(sal) | min(sal) |<br>+----------+----------+-------------+----------+----------+<br>|       14 | 29025.00 | 2073.214286 |  5000.00 |   800.00 |<br>+----------+----------+-------------+----------+----------+<br><br></code></pre></td></tr></table></figure><h5 id="5、单行处理函数"><a href="#5、单行处理函数" class="headerlink" title="5、单行处理函数"></a>5、单行处理函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">输入一行，输出一行。<br><br>计算每个员工的年薪？<br>select ename,(sal+comm)*12 as yearsal from emp;<br>重点：所有数据库都是这样规定的，只要有NULL参与的运算结果一定是NULL。<br>使用ifnull函数：<br>select ename,(sal+ifnull(comm,0))*12 as yearsal from emp;<br><br>ifnull() 空处理函数？ ifnull(可能为NULL的数据,被当做什么处理)：属于单行处理函数。<br>select ename,ifnull(comm,0) as comm from emp;<br>+--------+---------+<br>| ename  | comm    |<br>+--------+---------+<br>| SMITH  |    0.00 |<br>| ALLEN  |  300.00 |<br>| WARD   |  500.00 |<br>| JONES  |    0.00 |<br>| MARTIN | 1400.00 |<br>| BLAKE  |    0.00 |<br>| CLARK  |    0.00 |<br>| SCOTT  |    0.00 |<br>| KING   |    0.00 |<br>| TURNER |    0.00 |<br>| ADAMS  |    0.00 |<br>| JAMES  |    0.00 |<br>| FORD   |    0.00 |<br>| MILLER |    0.00 |<br>+--------+---------+<br></code></pre></td></tr></table></figure><h5 id="6、group-by-和-having"><a href="#6、group-by-和-having" class="headerlink" title="6、group by 和 having"></a>6、group by 和 having</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs mysql">group by ： 按照某个字段或者某些字段进行分组。<br>having ： 对分组之后的数据进行再次过滤。<br><br>案例：找出每个工作岗位的最高薪资。<br>select max(sal),job from emp group by job;<br>+----------+-----------+<br>| max(sal) | job       |<br>+----------+-----------+<br>|  3000.00 | ANALYST   |<br>|  1300.00 | CLERK     |<br>|  2975.00 | MANAGER   |<br>|  5000.00 | PRESIDENT |<br>|  1600.00 | SALESMAN  |<br>+----------+-----------+<br>注意：<br>*分组函数一般都会和 group by联合使用，这也是为什么它被称为分组函数的原因。<br>*并且任何一个分组函数（ count sum avg max min）都是在 group by语句执行结束之后才会执行的。<br>*当一条sql语句没有 group by的话，整张表的数据会自成一组。<br><br>select ename,max(sal),job from emp group by job;<br>以上在mysql当中，查询结果是有的，但是结果没有意义，查询出的结果与实际结果并不相符，在Oracle数据库当中会报错。语法错误。Oracle的语法规则比MySQL语法规则严谨。<br>***记住一个规则：当一条语句中有 group by的话， select后面只能跟1、分组函数和2、参与分组的字段。<br><br>每个工作岗位的平均薪资？<br>select job,avg(sal) from emp group by job;<br>+-----------+-------------+<br>| job       | avg(sal)    |<br>+-----------+-------------+<br>| ANALYST   | 3000.000000 |<br>| CLERK     | 1037.500000 |<br>| MANAGER   | 2758.333333 |<br>| PRESIDENT | 5000.000000 |<br>| SALESMAN  | 1400.000000 |<br>+-----------+-------------+<br><br>多个字段能不能联合起来一块分组？<br>案例：找出每个部门不同工作岗位的最高薪资。（和找出每个工作岗位的最高薪资不同）<br>select deptno,job,max(sal) from emp group by deptno,job;<br><br>找出每个部门的最高薪资，要求显示薪资大于2900的数据。<br>第一步：找出每个部门的最高薪资<br>select max(sal),deptno from emp group by deptno;<br>+----------+--------+<br>| max(sal) | deptno |<br>+----------+--------+<br>|  5000.00 |     10 |<br>|  3000.00 |     20 |<br>|  2850.00 |     30 |<br>+----------+--------+<br><br>第二步：找出薪资大于2900<br>select max(sal),deptno from emp group by deptno having max(sal) &gt; 2900;#这种方式效率低。<br>+----------+--------+<br>| max(sal) | deptno |<br>+----------+--------+<br>|  5000.00 |     10 |<br>|  3000.00 |     20 |<br>+----------+--------+<br><br>select max(sal),deptno from emp where sal &gt; 2900 group by deptno;#效率较高，因为where是在group by之前执行的，先筛选之后再分组，如果使用having的话，先分组再过滤的效率较低（分好组的数据却被过滤了，那就白分组了），建议能够使用where过滤的尽量使用where。但是如果where之后要用的数据是分完组之后算出来的那么没办法只能用having<br>+----------+--------+<br>| max(sal) | deptno |<br>+----------+--------+<br>|  5000.00 |     10 |<br>|  3000.00 |     20 |<br>+----------+--------+<br><br>找出每个部门的平均薪资，要求显示薪资大于2000的数据。<br>第一步：找出每个部门的平均薪资<br>select deptno,avg(sal) from emp group by deptno;<br>+--------+-------------+<br>| deptno | avg(sal)    |<br>+--------+-------------+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>|     30 | 1566.666667 |<br>+--------+-------------+<br><br>第二步：要求显示薪资大于2000的数据<br>select deptno,avg(sal) from emp group by deptno having avg(sal) &gt; 2000;<br>+--------+-------------+<br>| deptno | avg(sal)    |<br>+--------+-------------+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>+--------+-------------+<br><br>where后面不能使用分组函数：<br>select deptno,avg(sal) from emp where avg(sal) &gt; 2000 group by deptno; #错误了。<br>这种情况只能使用having过滤。<br></code></pre></td></tr></table></figure><h5 id="7、总结一个完整的DQL语句怎么写？"><a href="#7、总结一个完整的DQL语句怎么写？" class="headerlink" title="7、总结一个完整的DQL语句怎么写？"></a>7、总结一个完整的DQL语句怎么写？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select5<br>..<br>from1<br>..<br>where2<br>..<br>group by3<br>..<br>having4  #having和group by是绑定的，用having之前必须先分组<br>..<br>order by6<br>..<br></code></pre></td></tr></table></figure><h5 id="8、查询结果集去重"><a href="#8、查询结果集去重" class="headerlink" title="8、查询结果集去重"></a>8、查询结果集去重</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct job from emp; // distinct关键字去除重复记录。<br>+-----------+<br>| job       |<br>+-----------+<br>| CLERK     |<br>| SALESMAN  |<br>| MANAGER   |<br>| ANALYST   |<br>| PRESIDENT |<br>+-----------+<br><br>select ename,distinct job from emp;<br>以上的sql语句是错误的。<br>***记住：<br>1、distinct只能出现在所有字段的最前面。<br>2、distinct出现在最前方表示后面所有的字段联合起来去重<br><br>select distinct deptno,job from emp;<br>+--------+-----------+<br>| deptno | job       |<br>+--------+-----------+<br>|     20 | CLERK     |<br>|     30 | SALESMAN  |<br>|     20 | MANAGER   |<br>|     30 | MANAGER   |<br>|     10 | MANAGER   |<br>|     20 | ANALYST   |<br>|     10 | PRESIDENT |<br>|     30 | CLERK     |<br>|     10 | CLERK     |<br>+--------+-----------+<br><br>案例：统计岗位的数量？<br>select count(distinct job) from emp;<br>    +---------------------+<br>    | count(distinct job) |<br>    +---------------------+<br>    |                   5 |<br>    +---------------------+<br></code></pre></td></tr></table></figure><h5 id="9、连接查询"><a href="#9、连接查询" class="headerlink" title="9、连接查询"></a>9、连接查询</h5><p>1、什么是连接查询？<br>    在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">在实际开发中，一般一个业务都会对应多张表，比如：学生和班级，起码两张表。<br>stunostunameclassnoclassname<br>---------------------------------------------------------------------<br>1zs1第二中学高三1班<br>2ls1第二中学高三1班<br>学生和班级信息存储到一张表中，结果就像上面一样，数据会存在大量的重复，导致数据的冗余。（班级序号和名字都冗余了）<br></code></pre></td></tr></table></figure><p>2、连接查询的分类？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">根据语法出现的年代来划分的话，包括：<br>SQL92（一些老的DBA可能还在使用这种语法。DBA：DataBase Administrator，数据库管理员）<br>SQL99（比较新的语法）<br>根据表的连接方式来划分，包括：<br>1、内连接：<br>等值连接<br>非等值连接<br>自连接<br>2、外连接：<br>左外连接（左连接）<br>右外连接（右连接）<br>3、全连接（这个不讲，很少用！）<br></code></pre></td></tr></table></figure><p>3、在表的连接查询方面有一种现象被称为：笛卡尔积现象。（笛卡尔乘积现象）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs mysql">案例：找出每一个员工的部门名称，要求显示员工名和部门名。<br>EMP表<br>    +--------+--------+<br>    | ename  | deptno |<br>    +--------+--------+<br>    | SMITH  |     20 |<br>    | ALLEN  |     30 |<br>    | WARD   |     30 |<br>    | JONES  |     20 |<br>    | MARTIN |     30 |<br>    | BLAKE  |     30 |<br>    | CLARK  |     10 |<br>    | SCOTT  |     20 |<br>    | KING   |     10 |<br>    | TURNER |     30 |<br>    | ADAMS  |     20 |<br>    | JAMES  |     30 |<br>    | FORD   |     20 |<br>    | MILLER |     10 |<br>    +--------+--------+<br>DEPT表<br>    +--------+------------+----------+<br>    | DEPTNO | DNAME      | LOC      |<br>    +--------+------------+----------+<br>    |     10 | ACCOUNTING | NEW YORK |<br>    |     20 | RESEARCH   | DALLAS   |<br>    |     30 | SALES      | CHICAGO  |<br>    |     40 | OPERATIONS | BOSTON   |<br>    +--------+------------+----------+<br><br>select ename,dname from emp,dept;<br>    +--------+------------+<br>    | ename  | dname      |<br>    +--------+------------+<br>    | SMITH  | ACCOUNTING |<br>    | SMITH  | RESEARCH   |<br>    | SMITH  | SALES      |<br>    | SMITH  | OPERATIONS |<br>    | ALLEN  | ACCOUNTING |<br>    | ALLEN  | RESEARCH   |<br>    ............<br>    56 rows in set (0.00 sec)<br><br>笛卡尔积现象：当两张表进行连接查询的时候，*没有任何条件进行限制*，最终的查询结果条数是两张表记录条数的乘积。<br><br>关于表的别名：<br>select e.ename,d.dname from emp e,dept d;#ename和dname要联合显示<br>表的别名（和字段别名一样）有什么好处？<br>第一：执行效率高。不加别名的话ename不但在第一张表中找，还会在第二张表中找<br>第二：可读性好。<br></code></pre></td></tr></table></figure><p>4、怎么避免笛卡尔积现象？当然是加条件进行过滤，但是这样并不会减少匹配次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">思考：避免了笛卡尔积现象，会减少记录的匹配次数吗？<br>不会，次数还是56次。只不过显示的是有效记录。<br><br>案例：找出每一个员工的部门名称，要求显示员工名和部门名。<br>selecte.ename,d.dname from emp e , dept d where e.deptno = d.deptno; #SQL92的语法，以后不用。<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| CLARK  | ACCOUNTING |<br>| KING   | ACCOUNTING |<br>| MILLER | ACCOUNTING |<br>| SMITH  | RESEARCH   |<br>| JONES  | RESEARCH   |<br>| SCOTT  | RESEARCH   |<br>| ADAMS  | RESEARCH   |<br>| FORD   | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| TURNER | SALES      |<br>| JAMES  | SALES      |<br>+--------+------------+<br></code></pre></td></tr></table></figure><p>5、内连接之等值连接：最大特点是：条件是等量关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs mysql">案例：查询每个员工的部门名称，要求显示员工名和部门名。<br>SQL92:（太老，不用了）<br>select e.ename,d.dname from emp e, dept d where e.deptno = d.deptno;<br><br>SQL99：（常用的）<br>select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno;<br><br>#join on 语法，on后加表的连接条件<br>#inner可以省略的，带着inner目的是可读性好一些。<br>select e.ename,d.dname from emp e inner join dept d on e.deptno = d.deptno;<br><br>SQL99 语法：<br> ... A join B on 连接条件 where ...<br>SQL99语法结构更清晰一些：表的连接条件和后来的where条件分离了，表的连接就是表的连接，后面再过滤使用where。<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| CLARK  | ACCOUNTING |<br>| KING   | ACCOUNTING |<br>| MILLER | ACCOUNTING |<br>| SMITH  | RESEARCH   |<br>| JONES  | RESEARCH   |<br>| SCOTT  | RESEARCH   |<br>| ADAMS  | RESEARCH   |<br>| FORD   | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| TURNER | SALES      |<br>| JAMES  | SALES      |<br>+--------+------------+<br></code></pre></td></tr></table></figure><p>6、内连接之非等值连接：最大的特点是：连接条件中的关系是非等量关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs mysql">案例：找出每个员工的工资等级，要求显示员工名、工资、工资等级。<br><br>mysql&gt; select ename,sal from emp;<br>    +--------+---------+<br>    | ename  | sal     |<br>    +--------+---------+<br>    | SMITH  |  800.00 |<br>    | ALLEN  | 1600.00 |<br>    | WARD   | 1250.00 |<br>    | JONES  | 2975.00 |<br>    | MARTIN | 1250.00 |<br>    | BLAKE  | 2850.00 |<br>    | CLARK  | 2450.00 |<br>    | SCOTT  | 3000.00 |<br>    | KING   | 5000.00 |<br>    | TURNER | 1500.00 |<br>    | ADAMS  | 1100.00 |<br>    | JAMES  |  950.00 |<br>    | FORD   | 3000.00 |<br>    | MILLER | 1300.00 |<br>    +--------+---------+<br><br>mysql&gt; select * from salgrade;<br>    +-------+-------+-------+ <br>    | GRADE | LOSAL | HISAL |<br>    +-------+-------+-------+<br>    |     1 |   700 |  1200 |<br>    |     2 |  1201 |  1400 |<br>    |     3 |  1401 |  2000 |<br>    |     4 |  2001 |  3000 |<br>    |     5 |  3001 |  9999 |<br>    +-------+-------+-------+<br>    <br>select <br>e.ename,e.sal,s.grade<br>from<br>emp e<br>join # inner可以省略<br>salgrade s<br>on<br>e.sal between s.losal and s.hisal;<br>        +--------+---------+-------+<br>        | ename  | sal     | grade |<br>        +--------+---------+-------+<br>        | SMITH  |  800.00 |     1 |<br>        | ALLEN  | 1600.00 |     3 |<br>        | WARD   | 1250.00 |     2 |<br>        | JONES  | 2975.00 |     4 |<br>        | MARTIN | 1250.00 |     2 |<br>        | BLAKE  | 2850.00 |     4 |<br>        | CLARK  | 2450.00 |     4 |<br>        | SCOTT  | 3000.00 |     4 |<br>        | KING   | 5000.00 |     5 |<br>        | TURNER | 1500.00 |     3 |<br>        | ADAMS  | 1100.00 |     1 |<br>        | JAMES  |  950.00 |     1 |<br>        | FORD   | 3000.00 |     4 |<br>        | MILLER | 1300.00 |     2 |<br>        +--------+---------+-------+<br></code></pre></td></tr></table></figure><p>7、自连接：最大的特点是：一张表看做两张表。自己连接自己（起别名）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs mysql">案例：找出每个员工的上级领导，要求显示员工名和对应的领导名。<br>mysql&gt; select empno,ename,mgr from emp;<br>emp a员工表<br>    +-------+--------+------+<br>    | empno | ename  | mgr  |<br>    +-------+--------+------+<br>    |  7369 | SMITH  | 7902 |<br>    |  7499 | ALLEN  | 7698 |<br>    |  7521 | WARD   | 7698 |<br>    |  7566 | JONES  | 7839 |<br>    |  7654 | MARTIN | 7698 |<br>    |  7698 | BLAKE  | 7839 |<br>    |  7782 | CLARK  | 7839 |<br>    |  7788 | SCOTT  | 7566 |<br>    |  7839 | KING   | NULL |<br>    |  7844 | TURNER | 7698 |<br>    |  7876 | ADAMS  | 7788 |<br>    |  7900 | JAMES  | 7698 |<br>    |  7902 | FORD   | 7566 |<br>    |  7934 | MILLER | 7782 |<br>    +-------+--------+------+<br>emp b 领导表 （员工表当中只有以下6个员工是领导。下面的表是上面表的子表）<br>    +-------+--------+<br>    | empno | ename  |<br>    +-------+--------+<br>    |  7566 | JONES  |<br>    |  7698 | BLAKE  |<br>    |  7782 | CLARK  |<br>    |  7788 | SCOTT  |<br>    |  7839 | KING   |<br>    |  7902 | FORD   |<br>    +-------+--------+<br>员工的领导编号 = 领导的员工编号<br><br>select <br>a.ename as &#x27;员工名&#x27;,b.ename as &#x27;领导名&#x27;<br>from<br>emp a<br>inner join<br>emp b<br>on<br>a.mgr = b.empno;<br>        +--------+--------+<br>        | 员工名 | 领导名 |<br>        +--------+--------+<br>        | SMITH  | FORD   |<br>        | ALLEN  | BLAKE  |<br>        | WARD   | BLAKE  |<br>        | JONES  | KING   |<br>        | MARTIN | BLAKE  |<br>        | BLAKE  | KING   |<br>        | CLARK  | KING   |<br>        | SCOTT  | JONES  |<br>        | TURNER | BLAKE  |<br>        | ADAMS  | SCOTT  |<br>        | JAMES  | BLAKE  |<br>        | FORD   | JONES  |<br>        | MILLER | CLARK  |<br>        +--------+--------+<br>        13 rows in set (0.00 sec)<br>#只有13条记录。这就是内连接，匹配的上就查出来匹配不上就不查了<br></code></pre></td></tr></table></figure><p>8、外连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs mysql">什么是外连接，和内连接有什么区别？<br>1、内连接：<br>假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的记录查询出来，这就是内连接。AB两张表没有主副之分，两张表是平等的。<br>2、外连接：<br> 假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主表，一张表是副表，主要查询主表中的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。<br>3、外连接的分类<br>左外连接（左连接）：表示左边的这张表是主表。<br>右外连接（右连接）：表示右边的这张表是主表。<br>左连接有右连接的写法，右连接也会有对应的左连接的写法。<br><br>案例：找出每个员工的上级领导？（所有员工必须全部查询出来。）<br>emp a 员工表<br>    +-------+--------+------+<br>    | empno | ename  | mgr  |<br>    +-------+--------+------+<br>    |  7369 | SMITH  | 7902 |<br>    |  7499 | ALLEN  | 7698 |<br>    |  7521 | WARD   | 7698 |<br>    |  7566 | JONES  | 7839 |<br>    |  7654 | MARTIN | 7698 |<br>    |  7698 | BLAKE  | 7839 |<br>    |  7782 | CLARK  | 7839 |<br>    |  7788 | SCOTT  | 7566 |<br>    |  7839 | KING   | NULL |<br>    |  7844 | TURNER | 7698 |<br>    |  7876 | ADAMS  | 7788 |<br>    |  7900 | JAMES  | 7698 |<br>    |  7902 | FORD   | 7566 |<br>    |  7934 | MILLER | 7782 |<br>    +-------+--------+------+<br>emp b 领导表<br>    +-------+--------+<br>    | empno | ename  |<br>    +-------+--------+<br>    |  7566 | JONES  |<br>    |  7698 | BLAKE  |<br>    |  7782 | CLARK  |<br>    |  7788 | SCOTT  |<br>    |  7839 | KING   |<br>    |  7902 | FORD   |<br>    +-------+--------+<br><br>内连接：<br>select a.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27; from emp a join emp b on a.mgr = b.empno;<br><br>外连接：（左外连接/左连接）<br>select a.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27; from emp a left join emp b on a.mgr = b.empno;<br>#left outer join，outer是可以省略的。<br>外连接：（右外连接/右连接）<br>select a.ename &#x27;员工&#x27;, b.ename &#x27;领导&#x27; from emp b right join emp a on a.mgr = b.empno;<br>#right outer join，outer是可以省略的。<br>    +--------+-------+<br>    | 员工      | 领导    |<br>    +--------+-------+<br>    | SMITH  | FORD  |<br>    | ALLEN  | BLAKE |<br>    | WARD   | BLAKE |<br>    | JONES  | KING  |<br>    | MARTIN | BLAKE |<br>    | BLAKE  | KING  |<br>    | CLARK  | KING  |<br>    | SCOTT  | JONES |<br>    | KING   | NULL  |<br>    | TURNER | BLAKE |<br>    | ADAMS  | SCOTT |<br>    | JAMES  | BLAKE |<br>    | FORD   | JONES |<br>    | MILLER | CLARK |<br>    +--------+-------+<br>    14 rows in set (0.00 sec)<br># 外连接最重要的特点是：主表的数据无条件的全部查询出来。虽然king的领导是null但是仍然可以查询出来<br><br>案例：找出哪个部门没有员工？<br>EMP表<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>DEPT<br>    +--------+------------+----------+<br>    | DEPTNO | DNAME      | LOC      |<br>    +--------+------------+----------+<br>    |     10 | ACCOUNTING | NEW YORK |<br>    |     20 | RESEARCH   | DALLAS   |<br>    |     30 | SALES      | CHICAGO  |<br>    |     40 | OPERATIONS | BOSTON   |<br>    +--------+------------+----------+<br><br>select d.* from emp e right join dept d on e.deptno = d.deptno where e.empno is null;#外连接无条件查询主表中的所有元素。当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。所以查询之后40号部门的emp中字段全是null<br>    +--------+------------+--------+<br>    | DEPTNO | DNAME      | LOC    |<br>    +--------+------------+--------+<br>    |     40 | OPERATIONS | BOSTON |<br>    +--------+------------+--------+<br></code></pre></td></tr></table></figure><p>9、三张表怎么连接查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs mysql">案例：找出每一个员工的部门名称以及工资等级。<br>EMP e<br>    +-------+--------+---------+--------+<br>    | empno | ename  | sal     | deptno |<br>    +-------+--------+---------+--------+<br>    |  7369 | SMITH  |  800.00 |     20 |<br>    |  7499 | ALLEN  | 1600.00 |     30 |<br>    |  7521 | WARD   | 1250.00 |     30 |<br>    |  7566 | JONES  | 2975.00 |     20 |<br>    |  7654 | MARTIN | 1250.00 |     30 |<br>    |  7698 | BLAKE  | 2850.00 |     30 |<br>    |  7782 | CLARK  | 2450.00 |     10 |<br>    |  7788 | SCOTT  | 3000.00 |     20 |<br>    |  7839 | KING   | 5000.00 |     10 |<br>    |  7844 | TURNER | 1500.00 |     30 |<br>    |  7876 | ADAMS  | 1100.00 |     20 |<br>    |  7900 | JAMES  |  950.00 |     30 |<br>    |  7902 | FORD   | 3000.00 |     20 |<br>    |  7934 | MILLER | 1300.00 |     10 |<br>    +-------+--------+---------+--------+<br>DEPT d<br>    +--------+------------+----------+<br>    | DEPTNO | DNAME      | LOC      |<br>    +--------+------------+----------+<br>    |     10 | ACCOUNTING | NEW YORK |<br>    |     20 | RESEARCH   | DALLAS   |<br>    |     30 | SALES      | CHICAGO  |<br>    |     40 | OPERATIONS | BOSTON   |<br>    +--------+------------+----------+<br>SALGRADE s<br>    +-------+-------+-------+<br>    | GRADE | LOSAL | HISAL |<br>    +-------+-------+-------+<br>    |     1 |   700 |  1200 |<br>    |     2 |  1201 |  1400 |<br>    |     3 |  1401 |  2000 |<br>    |     4 |  2001 |  3000 |<br>    |     5 |  3001 |  9999 |<br>    +-------+-------+-------+<br><br>注意，解释一下：<br>....<br>A<br>join<br>B<br>join<br>C<br>on<br>...<br>#表示：A表和B表先进行表连接，连接之后A表继续和C表进行连接。<br>#注意：虽然是多张表，但是还是当做两张表的连接看，AB连接和AC连接<br>select e.ename,d.dname,s.grade from emp e join dept d<br>on<br>e.deptno = d.deptno<br>join<br>salgrade s<br>on<br>e.sal between s.losal and s.hisal;<br><br>+--------+------------+-------+<br>| ename  | dname      | grade |<br>+--------+------------+-------+<br>| SMITH  | RESEARCH   |     1 |<br>| ALLEN  | SALES      |     3 |<br>| WARD   | SALES      |     2 |<br>| JONES  | RESEARCH   |     4 |<br>| MARTIN | SALES      |     2 |<br>| BLAKE  | SALES      |     4 |<br>| CLARK  | ACCOUNTING |     4 |<br>| SCOTT  | RESEARCH   |     4 |<br>| KING   | ACCOUNTING |     5 |<br>| TURNER | SALES      |     3 |<br>| ADAMS  | RESEARCH   |     1 |<br>| JAMES  | SALES      |     1 |<br>| FORD   | RESEARCH   |     4 |<br>| MILLER | ACCOUNTING |     2 |<br>+--------+------------+-------+<br><br>案例：找出每一个员工的部门名称、工资等级、以及上级领导。<br>select <br>e.ename &#x27;员工&#x27;,d.dname,s.grade,e1.ename &#x27;领导&#x27;<br>from<br>emp e<br>join<br>dept d<br>on<br>e.deptno = d.deptno<br>join<br>salgrade s<br>on<br>e.sal between s.losal and s.hisal<br>left join<br>emp e1<br>on<br>e.mgr = e1.empno;<br><br>+--------+------------+-------+-------+<br>| 员工      | dname      | grade | 领导    |<br>+--------+------------+-------+-------+<br>| SMITH  | RESEARCH   |     1 | FORD  |<br>| ALLEN  | SALES      |     3 | BLAKE |<br>| WARD   | SALES      |     2 | BLAKE |<br>| JONES  | RESEARCH   |     4 | KING  |<br>| MARTIN | SALES      |     2 | BLAKE |<br>| BLAKE  | SALES      |     4 | KING  |<br>| CLARK  | ACCOUNTING |     4 | KING  |<br>| SCOTT  | RESEARCH   |     4 | JONES |<br>| KING   | ACCOUNTING |     5 | NULL  |<br>| TURNER | SALES      |     3 | BLAKE |<br>| ADAMS  | RESEARCH   |     1 | SCOTT |<br>| JAMES  | SALES      |     1 | BLAKE |<br>| FORD   | RESEARCH   |     4 | JONES |<br>| MILLER | ACCOUNTING |     2 | CLARK |<br>+--------+------------+-------+-------+<br></code></pre></td></tr></table></figure><h5 id="10、子查询"><a href="#10、子查询" class="headerlink" title="10、子查询"></a>10、子查询</h5><p>1、什么是子查询？子查询都可以出现在哪里？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select语句当中嵌套 select语句，被嵌套的 select语句是子查询。<br>子查询可以出现在哪里？<br>select<br>..(select).<br>from<br>..(select).<br>where<br>..(select).<br></code></pre></td></tr></table></figure><p>2、where子句中使用子查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">案例：找出高于平均薪资的员工信息。<br>select * from emp where sal &gt; avg(sal); #错误的写法，where后面不能直接使用分组函数。<br><br>第一步：找出平均薪资<br>select avg(sal) from emp;<br>+-------------+<br>| avg(sal)    |<br>+-------------+<br>| 2073.214286 |<br>+-------------+<br>第二步：where过滤<br>select * from emp where sal &gt; 2073.214286;<br><br>第一步和第二步合并：<br>select * from emp where sal &gt; (select avg(sal) from emp);<br></code></pre></td></tr></table></figure><p>3、from后面嵌套子查询 <strong>￥￥重点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs mysql">案例：找出每个部门平均薪水的等级。<br>第一步：找出每个部门平均薪水（按照部门编号分组，求sal的平均值）<br>select deptno,avg(sal) as avgsal from emp group by deptno;<br>    +--------+-------------+<br>    | deptno | avgsal      |<br>    +--------+-------------+<br>    |     10 | 2916.666667 |<br>    |     20 | 2175.000000 |<br>    |     30 | 1566.666667 |<br>    +--------+-------------+<br>第二步：将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是：t.avgsal between s.losal and s.hisal<br>select <br>t.*,s.grade<br>from<br>(select deptno,avg(sal) as avgsal from emp group by deptno) t<br>join<br>salgrade s<br>on<br>t.avgsal between s.losal and s.hisal;<br>    +--------+-------------+-------+<br>    | deptno | avgsal      | grade |<br>    +--------+-------------+-------+<br>    |     30 | 1566.666667 |     3 |<br>    |     10 | 2916.666667 |     4 |<br>    |     20 | 2175.000000 |     4 |<br>    +--------+-------------+-------+<br><br>案例：找出每个部门平均的薪水等级（每个部门中所有员工的薪水等级的平均值）。<br>第一步：找出每个员工的薪水等级。<br>select e.ename &#x27;员工&#x27;,e.sal &#x27;薪水&#x27;,e.deptno &#x27;部门编号&#x27;,s.grade &#x27;薪资等级&#x27; from emp e join salgrade s on e.sal between s.losal and s.hisal;<br>    +--------+---------+--------+-------+<br>    | ename  | sal     | deptno | grade |<br>    +--------+---------+--------+-------+<br>    | SMITH  |  800.00 |     20 |     1 |<br>    | ALLEN  | 1600.00 |     30 |     3 |<br>    | WARD   | 1250.00 |     30 |     2 |<br>    | JONES  | 2975.00 |     20 |     4 |<br>    | MARTIN | 1250.00 |     30 |     2 |<br>    | BLAKE  | 2850.00 |     30 |     4 |<br>    | CLARK  | 2450.00 |     10 |     4 |<br>    | SCOTT  | 3000.00 |     20 |     4 |<br>    | KING   | 5000.00 |     10 |     5 |<br>    | TURNER | 1500.00 |     30 |     3 |<br>    | ADAMS  | 1100.00 |     20 |     1 |<br>    | JAMES  |  950.00 |     30 |     1 |<br>    | FORD   | 3000.00 |     20 |     4 |<br>    | MILLER | 1300.00 |     10 |     2 |<br>    +--------+---------+--------+-------+<br>第二步：基于以上结果，继续按照deptno分组，求grade平均值。<br>select <br>e.deptno,avg(s.grade)<br>from <br>emp e <br>join <br>salgrade s <br>on <br>e.sal between s.losal and s.hisal #先算了一下薪水等级<br>group by #然后分组。最后执行select后面的分组函数<br>e.deptno;<br>    +--------+--------------+<br>    | deptno | avg(s.grade) |<br>    +--------+--------------+<br>    |     10 |       3.6667 |<br>    |     20 |       2.8000 |<br>    |     30 |       2.5000 |<br>    +--------+--------------+<br></code></pre></td></tr></table></figure><p>4、在select后面嵌套子查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs mysql">案例：找出每个员工所在的部门名称，要求显示员工名和部门名。<br>#一般使用下面语句<br>select <br>e.ename,d.dname<br>from<br>emp e<br>join<br>dept d<br>on<br>e.deptno = d.deptno;<br>#下面这个是不常用的写法，只是为了学习select后面嵌套子查询<br>select <br>e.ename,(select d.dname from dept d where e.deptno = d.deptno) as dname <br>from <br>emp e;<br><br>    +--------+------------+<br>    | ename  | dname      |<br>    +--------+------------+<br>    | SMITH  | RESEARCH   |<br>    | ALLEN  | SALES      |<br>    | WARD   | SALES      |<br>    | JONES  | RESEARCH   |<br>    | MARTIN | SALES      |<br>    | BLAKE  | SALES      |<br>    | CLARK  | ACCOUNTING |<br>    | SCOTT  | RESEARCH   |<br>    | KING   | ACCOUNTING |<br>    | TURNER | SALES      |<br>    | ADAMS  | RESEARCH   |<br>    | JAMES  | SALES      |<br>    | FORD   | RESEARCH   |<br>    | MILLER | ACCOUNTING |<br>    +--------+------------+<br></code></pre></td></tr></table></figure><h5 id="11、union"><a href="#11、union" class="headerlink" title="11、union"></a>11、union</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#将查询结果集相加<br>案例：找出工作岗位是SALESMAN和MANAGER的员工？<br>第一种：select ename,job from emp where job = &#x27;MANAGER&#x27; or job = &#x27;SALESMAN&#x27;;<br>第二种：select ename,job from emp where job in(&#x27;MANAGER&#x27;,&#x27;SALESMAN&#x27;);<br>    +--------+----------+<br>    | ename  | job      |<br>    +--------+----------+<br>    | ALLEN  | SALESMAN |<br>    | WARD   | SALESMAN |<br>    | JONES  | MANAGER  |<br>    | MARTIN | SALESMAN |<br>    | BLAKE  | MANAGER  |<br>    | CLARK  | MANAGER  |<br>    | TURNER | SALESMAN |<br>    +--------+----------+<br>第三种：union<br>select ename,job from emp where job = &#x27;MANAGER&#x27;<br>union<br>select ename,job from emp where job = &#x27;SALESMAN&#x27;;<br>    +--------+----------+<br>    | ename  | job      |<br>    +--------+----------+<br>    | JONES  | MANAGER  |<br>    | BLAKE  | MANAGER  |<br>    | CLARK  | MANAGER  |<br>    | ALLEN  | SALESMAN |<br>    | WARD   | SALESMAN |<br>    | MARTIN | SALESMAN |<br>    | TURNER | SALESMAN |<br>    +--------+----------+<br><br>两张不相干的表中的数据拼接在一起显示？<br>select ename from emp<br>union<br>select dname from dept; #能把查询结果拼成一列，前提是列数相同才能拼接，虽然拼接在一起的数据可能没什么意义<br>    +------------+<br>    | ename      |<br>    +------------+<br>    | SMITH      |<br>    | ALLEN      |<br>    | WARD       |<br>    | JONES      |<br>    | MARTIN     |<br>    | BLAKE      |<br>    | CLARK      |<br>    | SCOTT      |<br>    | KING       |<br>    | TURNER     |<br>    | ADAMS      |<br>    | JAMES      |<br>    | FORD       |<br>    | MILLER     |<br>    | ACCOUNTING |<br>    | RESEARCH   |<br>    | SALES      |<br>    | OPERATIONS |<br>    +------------+<br><br>select ename,sal from emp<br>union<br>select dname from dept;#拼接时列数必须相同<br>#ERROR 1222 (21000): The used SELECT statements have a different number of columns<br></code></pre></td></tr></table></figure><h5 id="12、limit-（重点）"><a href="#12、limit-（重点）" class="headerlink" title="12、limit （重点）"></a>12、limit （重点）</h5><p>1、limit是mysql特有的，其他数据库中没有，不通用。（Oracle中有一个相同的机制，叫rownum）</p><p>2、作用：limit取结果集中的部分数据</p><p>3、语法机制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">limit startIndex, length<br>startIndex表示起始位置，从0开始，0表示第一条数据。<br>length表示取几个<br>案例：取出工资前5名的员工（思路：降序取前5个）<br>select ename,sal from emp order by sal desc;<br>取前5个：<br>select ename,sal from emp order by sal desc limit 0, 5;<br>select ename,sal from emp order by sal desc limit 5;<br></code></pre></td></tr></table></figure><p>4、<code>limit</code> 是 sql 语句最后执行的一个环节：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select5<br>...<br>from1<br>...<br>where2<br>...<br>group by3<br>...<br>having4<br>...<br>order by6<br>...<br>limit7<br>...;<br></code></pre></td></tr></table></figure><p>5、案例：找出工资排名在第4到第9名的员工？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal from emp order by sal desc limit 3,6;<br>+--------+---------+<br>| ename  | sal     |<br>+--------+---------+<br>| JONES  | 2975.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| ALLEN  | 1600.00 |<br>| TURNER | 1500.00 |<br>| MILLER | 1300.00 |<br>+--------+---------+<br></code></pre></td></tr></table></figure><p>6、通用的标准分页sql？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">每页显示3条记录：<br>第1页：0, 3<br>第2页：3, 3<br>第3页：6, 3<br>第4页：9, 3<br>第5页：12, 3<br><br>每页显示pageSize条记录：<br>第pageNo页：(pageNo - 1) * pageSize, pageSize<br><br>pageSize是什么？是每页显示多少条记录<br>pageNo是什么？显示第几页<br><br>java代码&#123;<br>int pageNo = 2; // 页码是2<br>int pageSize = 10; // 每页显示10条<br><br>limit (pageNo - 1) * pageSize, pageSize<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2、数据定义语言（DDL）"><a href="#5-2、数据定义语言（DDL）" class="headerlink" title="5.2、数据定义语言（DDL）"></a>5.2、数据定义语言（DDL）</h4><h5 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs mysql">建表语句的语法格式：<br>create table 表名(<br>字段名1 数据类型,<br>字段名2 数据类型,<br>字段名3 数据类型,<br>....<br>);<br><br>关于MySQL当中字段的数据类型？以下只说常见的<br>int整数型(java中的int)<br>bigint长整型(java中的long)<br>float浮点型(java中的float double)<br>char定长字符串(String)<br>varchar可变长字符串(StringBuffer/StringBuilder) 最多存储255个字符<br>date日期类型 （对应Java中的java.sql.Date类型）<br>BLOB二进制大对象（存储图片、视频等流媒体信息） Binary Large OBject （对应java中的Object）<br>CLOB字符大对象（存储较大文本，比如，可以存储4G的字符串。） Character Large OBject（对应java中的Object）<br>......<br><br>char 和 varchar怎么选择？<br>在实际的开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：性别、生日等都是采用char。<br>当一个字段的数据长度不确定，例如：简介、姓名等都是采用varchar。<br><br>BLOB 和 CLOB类型的使用？<br>电影表: t_movie<br>id(int)name(varchar)<br>playtime(date/char)上映时间<br>haibao(BLOB)海报（图片） #图片必须使用java中的IO流才能放在表当中使用sql的insert不行，一般是将图片放在硬盘中，数据库中存储该图片的路径<br>history(CLOB)剧情梗概（大文本）<br><br>表名在数据库当中一般建议以：t_或者tbl_开始。<br><br>创建学生表：<br>学生信息包括：<br>学号、姓名、性别、班级编号、生日<br>学号：bigint<br>姓名：varchar<br>性别：char<br>班级编号：int<br>生日：char<br><br>create table t_student(<br>no bigint,<br>name varchar(255),<br>sex char(1),<br>classno varchar(255),<br>birth char(10)<br>);<br></code></pre></td></tr></table></figure><h5 id="2、对于表结构的修改"><a href="#2、对于表结构的修改" class="headerlink" title="2、对于表结构的修改"></a>2、对于表结构的修改</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter<br>这里不讲了，大家使用工具完成即可，因为在实际开发中表一旦<br>设计好之后，对表结构的修改是很少的，修改表结构就是对之前的设计进行了否定，即使<br>需要修改表结构，我们也可以直接使用工具操作。修改表结构的语句不会出现在Java代码当中。<br>出现在java代码当中的sql包括： insert delete update select（这些都是表中的数据操作。）<br><br>增删改查有一个术语：CRUD操作<br>Create（增） Retrieve（检索） Update（修改） Delete（删除）<br></code></pre></td></tr></table></figure><h5 id="3、约束-Constraint"><a href="#3、约束-Constraint" class="headerlink" title="3、约束(Constraint)"></a>3、约束(Constraint)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1、什么是约束？常见的约束有哪些呢？<br>在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的<br>合法性、有效性、完整性。<br>常见的约束有哪些呢？<br>非空约束(not null)：约束的字段不能为NULL<br>唯一约束(unique)：约束的字段不能重复<br>主键约束(primary key)：约束的字段既不能为NULL，也不能重复（简称PK）<br>外键约束(foreign key)：...（简称FK）<br>检查约束(check)：注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。<br><br>2、非空约束 not null<br>drop table if exists t_user;<br>create table t_user(<br>id int,<br>username varchar(255) not null,<br>password varchar(255)<br>);<br>insert into t_user(id,password) values(1,&#x27;123&#x27;);<br>#ERROR 1364 (HY000): Field &#x27;username&#x27; doesn&#x27;t have a default value<br>insert into t_user(id,username,password) values(1,&#x27;lisi&#x27;,&#x27;123&#x27;);<br><br>3、唯一性约束（unique）<br>* 唯一约束修饰的字段具有唯一性，不能重复。但可以为NULL。<br>* 案例：给某一列添加unique<br>drop table if exists t_user;<br>create table t_user(<br>id int,<br>username varchar(255) unique  #列级约束<br>);<br>insert into t_user values(1,&#x27;zhangsan&#x27;);<br>insert into t_user values(2,&#x27;zhangsan&#x27;);<br>#ERROR 1062 (23000): Duplicate entry &#x27;zhangsan&#x27; for key &#x27;username&#x27;<br><br>insert into t_user(id) values(2);<br>insert into t_user(id) values(3);<br>insert into t_user(id) values(4);<br><br>* 案例：给两个列或者多个列添加unique<br>drop table if exists t_user;<br>create table t_user(<br>id int, <br>usercode varchar(255),<br>username varchar(255),<br>unique(usercode,username) // 多个字段联合起来添加1个约束unique 【表级约束】<br>);<br>insert into t_user values(1,&#x27;111&#x27;,&#x27;zs&#x27;);<br>insert into t_user values(2,&#x27;111&#x27;,&#x27;ls&#x27;);<br>insert into t_user values(3,&#x27;222&#x27;,&#x27;zs&#x27;);<br>select * from t_user;<br>insert into t_user values(4,&#x27;111&#x27;,&#x27;zs&#x27;);<br>#ERROR 1062 (23000): Duplicate entry &#x27;111-zs&#x27; for key &#x27;usercode&#x27;<br><br>drop table if exists t_user;<br>create table t_user(<br>id int, <br>usercode varchar(255) unique,<br>username varchar(255) unique #两个列级约束<br>);<br>insert into t_user values(1,&#x27;111&#x27;,&#x27;zs&#x27;);<br>insert into t_user values(2,&#x27;111&#x27;,&#x27;ls&#x27;);<br>#ERROR 1062 (23000): Duplicate entry &#x27;111&#x27; for key &#x27;usercode&#x27;<br>* 注意： unique既有列级约束又有表级约束， not null约束只有列级约束。没有表级约束。<br><br>4、主键约束<br>* 怎么给一张表添加主键约束呢？<br>drop table if exists t_user;<br>create table t_user(<br>id int primary key,  # 列级约束<br>username varchar(255),<br>email varchar(255)<br>);<br>insert into t_user(id,username,email) values(1,&#x27;zs&#x27;,&#x27;zs@123.com&#x27;);<br>insert into t_user(id,username,email) values(2,&#x27;ls&#x27;,&#x27;ls@123.com&#x27;);<br>insert into t_user(id,username,email) values(3,&#x27;ww&#x27;,&#x27;ww@123.com&#x27;);<br>select * from t_user;<br>+----+----------+------------+<br>| id | username | email      |<br>+----+----------+------------+<br>|  1 | zs       | zs@123.com |<br>|  2 | ls       | ls@123.com |<br>|  3 | ww       | ww@123.com |<br>+----+----------+------------+<br><br>insert into t_user(id,username,email) values(1,&#x27;jack&#x27;,&#x27;jack@123.com&#x27;);<br>#ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;PRIMARY&#x27;<br><br>insert into t_user(username,email) values(&#x27;jack&#x27;,&#x27;jack@123.com&#x27;);<br>#ERROR 1364 (HY000): Field &#x27;id&#x27; doesn&#x27;t have a default value<br><br>根据以上的测试得出：id是主键，因为添加了主键约束，主键字段中的数据不能为NULL，也不能重复。<br>主键的特点：不能为NULL，也不能重复。<br><br>* 主键相关的术语？<br>主键约束 : primary key<br>主键字段 : id字段添加 primary key之后，id叫做主键字段<br>主键值 : id字段中的每一个值都是主键值。<br><br>* 主键有什么作用？<br>- 表的设计三范式中有要求，第一范式就要求任何一张表都应该有主键。<br>- 主键的作用：主键值是这行记录在这张表当中的唯一标识。（就像一个人的身份证号码一样。）<br><br>* 主键的分类？<br>根据主键字段的字段数量来划分：<br>单一主键（推荐的，常用的。）<br>复合主键(多个字段联合起来添加一个主键约束)（复合主键不建议使用，因为复合主键违背三范式。）<br>根据主键性质来划分：<br>自然主键：主键值最好就是一个和业务没有任何关系的自然数。（这种方式是推荐的）<br>业务主键：主键值和系统的业务挂钩，例如：拿着银行卡的卡号做主键，拿着身份证号码作为主键。（不推荐用）<br>#最好不要拿着和业务挂钩的字段作为主键。因为以后业务一旦发生改变的时候，主键值可能也需要随着发生变化，但有的时候没有办法变化，因为变化可能会导致主键值重复。<br><br>* 一张表的主键约束只能有1个。（必须记住）<br>* 使用表级约束方式定义主键：<br>drop table if exists t_user;<br>create table t_user(<br>id int,<br>username varchar(255),<br>primary key(id)<br>);<br>insert into t_user(id,username) values(1,&#x27;zs&#x27;);<br>insert into t_user(id,username) values(2,&#x27;ls&#x27;);<br>insert into t_user(id,username) values(3,&#x27;ws&#x27;);<br>insert into t_user(id,username) values(4,&#x27;cs&#x27;);<br>select * from t_user;<br><br>insert into t_user(id,username) values(4,&#x27;cx&#x27;);<br>#ERROR 1062 (23000): Duplicate entry &#x27;4&#x27; for key &#x27;PRIMARY&#x27;<br><br>以下内容是演示以下复合主键，不需要掌握：<br>drop table if exists t_user;<br>create table t_user(<br>id int,<br>username varchar(255),<br>password varchar(255),<br>primary key(id,username)<br>);<br>insert .......<br><br>* mysql提供主键值自增：（非常重要。）<br>drop table if exists t_user;<br>create table t_user(<br>id int primary key auto_increment, <br>    #id字段自动维护一个自增的数字，从1开始，以1递增。<br>username varchar(255)<br>);<br>insert into t_user(username) values(&#x27;a&#x27;);<br>insert into t_user(username) values(&#x27;b&#x27;);<br>insert into t_user(username) values(&#x27;c&#x27;);<br>insert into t_user(username) values(&#x27;d&#x27;);<br>insert into t_user(username) values(&#x27;e&#x27;);<br>insert into t_user(username) values(&#x27;f&#x27;);<br>select * from t_user;<br>#提示:Oracle当中也提供了一个自增机制，叫做：序列（sequence）对象。<br><br>5、外键约束<br>* 关于外键约束的相关术语：<br>外键约束: foreign key<br>外键字段：添加有外键约束的字段<br>外键值：外键字段中的每一个值。<br><br>* 业务背景：<br>请设计数据库表，用来维护学生和班级的信息？<br>第一种方案：一张表存储所有数据<br>no(pk)nameclassnoclassname<br>------------------------------------------------<br>1zs1101北京亦庄二中高三1班<br>2zs2101北京亦庄二中高三1班<br>3zs3102北京亦庄二中高三2班<br>4zs4102北京亦庄二中高三2班<br>5zs5102北京亦庄二中高三2班<br>缺点：冗余。【不推荐】<br><br>第二种方案：两张表（班级表和学生表）<br>t_class 班级表<br>cno(pk)cname<br>------------------------<br>101北京亦庄二中高三1班<br>102北京亦庄二中高三2班<br><br>t_student 学生表<br>sno(pk)snameclassno(fk)#该字段添加外键约束<br>--------------------------------------------------<br>1zs1101<br>2zs2101<br>3zs3102<br>4zs4102<br>5zs5102<br><br>* 将以上表的建表语句写出来：<br>t_student中的classno字段引用t_class表中的cno字段，此时t_student表叫做子表。t_class表叫做父表。<br>顺序要求：<br>删除数据的时候，先删除子表，再删除父表。<br>添加数据的时候，先添加父表，再添加子表。<br>创建表的时候，先创建父表，再创建子表。<br>删除表的时候，先删除子表，再删除父表。<br>drop table if exists t_student;<br>drop table if exists t_class;<br>create table t_class(<br>cno int,<br>cname varchar(255),<br>primary key(cno)<br>);<br><br>create table t_student(<br>sno int,<br>sname varchar(255),<br>classno int,<br>primary key(sno),<br>foreign key(classno) references t_class(cno)<br>);<br><br>insert into t_class values(101,&#x27;xxxxxxx&#x27;);<br>insert into t_class values(102,&#x27;yyyyyyy&#x27;);<br><br>insert into t_student values(1,&#x27;zs1&#x27;,101);<br>insert into t_student values(2,&#x27;zs2&#x27;,101);<br>insert into t_student values(3,&#x27;zs3&#x27;,102);<br>insert into t_student values(4,&#x27;zs4&#x27;,102);<br>insert into t_student values(5,&#x27;zs5&#x27;,102);<br>insert into t_student values(6,&#x27;zs6&#x27;,102);<br>select * from t_class;<br>select * from t_student;<br><br>insert into t_student values(7,&#x27;lisi&#x27;,103);<br>#ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`bjpowernode`.INT `t_student_ibfk_1` FOREIGN KEY (`classno`) REFERENCES `t_class` (`cno`))<br><br>* 外键值可以为NULL<br><br>* 外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？<br>注意：被引用的字段不一定是主键，但至少具有unique约束。一般情况下都是引用主键<br></code></pre></td></tr></table></figure><h5 id="4、删除表"><a href="#4、删除表" class="headerlink" title="4、删除表"></a>4、删除表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table 表名; #这个通用。<br>drop table if exists 表名; #oracle不支持这种写法。<br></code></pre></td></tr></table></figure><h4 id="5-3、数据操作语言（DML）"><a href="#5-3、数据操作语言（DML）" class="headerlink" title="5.3、数据操作语言（DML）"></a>5.3、数据操作语言（DML）</h4><h5 id="1、insert语句插入数据"><a href="#1、insert语句插入数据" class="headerlink" title="1、insert语句插入数据"></a>1、insert语句插入数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs mysql">语法格式：<br>insert into 表名(字段名1,字段名2,字段名3,....) values(值1,值2,值3,....)<br>要求：字段的数量和值的数量相同，并且数据类型要对应相同。<br>insert into t_student(no,name,sex,classno,birth) values(1,&#x27;zhangsan&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;);<br>#ERROR 1136 (21S01): Column count doesn&#x27;t match value count at row 1<br><br>insert into t_student(no,name,sex,classno,birth) values(1,&#x27;zhangsan&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;, &#x27;1950-10-12&#x27;);<br>select * from t_student;<br>    +------+----------+------+------------+------------+<br>    | no   | name     | sex  | classno    | birth      |<br>    +------+----------+------+------------+------------+<br>    |    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |<br>    +------+----------+------+------------+------------+<br><br>insert into t_student(name,sex,classno,birth,no) values(&#x27;lisi&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;, &#x27;1950-10-12&#x27;,2);<br>select * from t_student;<br>    +------+----------+------+------------+------------+<br>    | no   | name     | sex  | classno    | birth      |<br>    +------+----------+------+------------+------------+<br>    |    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |<br>    |    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |<br>    +------+----------+------+------------+------------+<br><br>insert into t_student(name) values(&#x27;wangwu&#x27;); #除name字段之外，剩下的所有字段自动插入NULL。<br>select * from t_student;<br>+------+----------+------+------------+------------+<br>| no   | name     | sex  | classno    | birth      |<br>+------+----------+------+------------+------------+<br>|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |<br>|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |<br>| NULL | wangwu   | NULL | NULL       | NULL       |<br>+------+----------+------+------------+------------+<br><br>insert into t_student(no) values(3); <br>select * from t_student;<br>+------+----------+------+------------+------------+<br>| no   | name     | sex  | classno    | birth      |<br>+------+----------+------+------------+------------+<br>|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |<br>|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |<br>| NULL | wangwu   | NULL | NULL       | NULL       |<br>|    3 | NULL     | NULL | NULL       | NULL       |<br>+------+----------+------+------------+------------+<br><br>drop table if exists t_student; #当这个表存在的话删除。<br>create table t_student(<br>no bigint,<br>name varchar(255),<br>sex char(1) default 1,#不写default默认值是null<br>classno varchar(255),<br>birth char(10)<br>);<br><br>insert into t_student(name) values(&#x27;zhangsan&#x27;);<br>select * from t_student;<br>    +------+----------+------+---------+-------+<br>    | no   | name     | sex  | classno | birth |<br>    +------+----------+------+---------+-------+<br>    | NULL | zhangsan | 1    | NULL    | NULL  |<br>    +------+----------+------+---------+-------+<br><br>需要注意的地方：<br>当一条insert语句执行成功之后，表格当中必然会多一行记录。<br>即使多的这一行记录当中某些字段是NULL，后期也没有办法再执行<br>insert语句插入数据后，只能使用update进行更新。<br><br>#字段可以省略不写，但是后面的value对数量和顺序都有要求。<br>insert into t_student values(1,&#x27;jack&#x27;,&#x27;0&#x27;,&#x27;gaosan2ban&#x27;,&#x27;1986-10-23&#x27;);<br>select * from t_student;<br>    +------+----------+------+------------+------------+<br>    | no   | name     | sex  | classno    | birth      |<br>    +------+----------+------+------------+------------+<br>    | NULL | zhangsan | 1    | NULL       | NULL       |<br>    |    1 | jack     | 0    | gaosan2ban | 1986-10-23 |<br>    +------+----------+------+------------+------------+<br><br>insert into t_student values(1,&#x27;jack&#x27;,&#x27;0&#x27;,&#x27;gaosan2ban&#x27;);<br>#ERROR 1136 (21S01): Column count doesn&#x27;t match value count at row 1<br><br># 一次插入多行数据<br>insert into t_student<br>(no,name,sex,classno,birth) <br>values<br>(3,&#x27;rose&#x27;,&#x27;1&#x27;,&#x27;gaosi2ban&#x27;,&#x27;1952-12-14&#x27;),(4,&#x27;laotie&#x27;,&#x27;1&#x27;,&#x27;gaosi2ban&#x27;,&#x27;1955-12-14&#x27;);<br><br>select * from t_student;<br>    +------+----------+------+------------+------------+<br>    | no   | name     | sex  | classno    | birth      |<br>    +------+----------+------+------------+------------+<br>    | NULL | zhangsan | 1    | NULL       | NULL       |<br>    |    1 | jack     | 0    | gaosan2ban | 1986-10-23 |<br>    |    3 | rose     | 1    | gaosi2ban  | 1952-12-14 |<br>    |    4 | laotie   | 1    | gaosi2ban  | 1955-12-14 |<br>    +------+----------+------+------------+------------+<br></code></pre></td></tr></table></figure><h5 id="2、表的复制"><a href="#2、表的复制" class="headerlink" title="2、表的复制"></a>2、表的复制</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">语法：<br>create table 表名 as select语句;<br>将查询结果当做表创建出来。<br>create table emp2 as select empno,ename from emp;<br></code></pre></td></tr></table></figure><h5 id="3、将查询结果插入到一张表中"><a href="#3、将查询结果插入到一张表中" class="headerlink" title="3、将查询结果插入到一张表中"></a>3、将查询结果插入到一张表中</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept1 as select * from dept;<br>insert into dept1 select * from dept;#将查询结果插入到一张表中<br>select * from dept1;<br>+--------+------------+----------+<br>| DEPTNO | DNAME      | LOC      |<br>+--------+------------+----------+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+--------+------------+----------+<br></code></pre></td></tr></table></figure><h5 id="4、修改数据：update"><a href="#4、修改数据：update" class="headerlink" title="4、修改数据：update"></a>4、修改数据：update</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mysql">语法格式：<br>update 表名 set 字段名1=值1,字段名2=值2... where 条件;<br>注意：没有条件整张表数据全部更新。<br><br>案例：将部门10的LOC修改为SHANGHAI，将部门名称修改为RENSHIBU<br>update dept1 set loc = &#x27;SHANGHAI&#x27;, dname = &#x27;RENSHIBU&#x27; where deptno = 10;<br>select * from dept1;<br>+--------+------------+----------+<br>| DEPTNO | DNAME      | LOC      |<br>+--------+------------+----------+<br>|     10 | RENSHIBU   | SHANGHAI |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>|     10 | RENSHIBU   | SHANGHAI |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+--------+------------+----------+<br><br>更新所有记录<br>update dept1 set loc = &#x27;x&#x27;, dname = &#x27;y&#x27;;#没有加where条件修改所有记录<br>select * from dept1;<br>+--------+-------+------+<br>| DEPTNO | DNAME | LOC  |<br>+--------+-------+------+<br>|     10 | y     | x    |<br>|     20 | y     | x    |<br>|     30 | y     | x    |<br>|     40 | y     | x    |<br>|     10 | y     | x    |<br>|     20 | y     | x    |<br>|     30 | y     | x    |<br>|     40 | y     | x    |<br>+--------+-------+------+<br></code></pre></td></tr></table></figure><h5 id="5、删除数据"><a href="#5、删除数据" class="headerlink" title="5、删除数据"></a>5、删除数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">语法格式：<br>delete from 表名 where 条件;<br>注意：没有条件全部删除。<br><br>删除10部门数据？<br>delete from dept1 where deptno = 10;<br>删除所有记录？<br>delete from dept1;<br>#delete 删除数据的时候速度慢，原因是没有真正的释放存储空间，可以回滚<br>怎么删除大表中的数据？（重点）<br>truncate table 表名; #表被截断，不可回滚。永久丢失。<br></code></pre></td></tr></table></figure><h3 id="6、存储引擎（了解内容）"><a href="#6、存储引擎（了解内容）" class="headerlink" title="6、存储引擎（了解内容）"></a>6、存储引擎（了解内容）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs mysql">6.1、完整的建表语句<br>CREATE TABLE `t_x` (<br>  `id` int(11) DEFAULT NULL<br>) ENGINE=InnoDB DEFAULT CHARSET = utf8;<br>注意：在MySQL当中，凡是标识符是可以使用飘号`括起来的。最好别用，不通用。<br>建表的时候可以指定存储引擎，也可以指定字符集。<br>mysql默认使用的存储引擎是InnoDB方式。<br>默认采用的字符集是UTF8<br><br>6.2、什么是存储引擎呢？<br>存储引擎这个名字只有在mysql中存在。（Oracle中有对应的机制，但是不叫做存储引擎。Oracle中没有特殊的名字，就是“表的存储方式”）<br>mysql支持很多存储引擎，每一个存储引擎都对应了一种不同的存储方式。<br>每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎。<br><br>6.3、查看当前mysql支持的存储引擎？<br>show engines \G<br>#5.5.62版本支持9个存储引擎<br>6.4、常见的存储引擎？<br><br>Engine: MyISAM<br>  Support: YES<br>  Comment: MyISAM storage engine<br>Transactions: NO<br> XA: NO<br>  Savepoints: NO<br><br>MyISAM这种存储引擎不支持事务。<br>MyISAM是mysql最常用的存储引擎，但是这种引擎不是默认的。<br>MyISAM采用三个文件组织一张表：<br>xxx.frm（存储格式（表结构）的文件）<br>xxx.MYD（存储表中数据的文件）<br>xxx.MYI（存储表中索引的文件）<br>优点：可被压缩，节省存储空间。并且可以转换为只读表，提高检索效率。<br>缺点：不支持事务。<br>-----------------------------------------------------------------------------<br>  Engine: InnoDB<br>  Support: DEFAULT<br>  Comment: Supports transactions, row-level locking, and foreign keys<br>Transactions: YES<br> XA: YES<br>  Savepoints: YES<br><br>优点：支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障。<br><br>表的结构存储在xxx.frm文件中<br>数据存储在 tablespace这样的表空间中（逻辑概念），无法被压缩，无法转换成只读。<br>这种 InnoDB存储引擎在MySQL数据库崩溃之后提供自动恢复机制。<br>InnoDB支持级联删除和级联更新。<br>-------------------------------------------------------------------------------------<br>Engine: MEMORY<br>  Support: YES<br>  Comment: Hash based, stored in memory, useful for temporary tables<br>Transactions: NO<br> XA: NO<br>  Savepoints: NO<br><br>缺点：不支持事务。数据容易丢失。因为所有数据和索引都是存储在内存当中的。<br>优点：查询速度最快。<br>以前叫做HEPA引擎。<br></code></pre></td></tr></table></figure><h4 id="6-1、面试题"><a href="#6-1、面试题" class="headerlink" title="6.1、面试题"></a>6.1、面试题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">有 3 个表 S(学生表)，C（课程表），SC（学生选课表）<br>S（SNO，SNAME）代表（学号，姓名）<br>C（CNO，CNAME，CTEACHER）代表（课号，课名，教师）<br>SC（SNO，CNO，SCGRADE）代表（学号，课号，成绩）<br>问题：<br>1，找出没选过“黎明”老师的所有学生姓名。<br>select xx from sc <br>2，列出 2 门以上（含2 门）不及格学生姓名及平均成绩。<br>3，即学过 1 号课程又学过 2 号课所有学生的姓名。<br></code></pre></td></tr></table></figure><h3 id="7、事务（Transaction）"><a href="#7、事务（Transaction）" class="headerlink" title="7、事务（Transaction）"></a>7、事务（Transaction）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs mysql">7.1、什么是事务？<br>一个事务是一个完整的业务逻辑单元，不可再分。<br><br>比如：银行账户转账，从A账户向B账户转账10000.需要执行两条update语句：<br>update t_act set balance = balance - 10000 where actno = &#x27;act-001&#x27;;<br>update t_act set balance = balance + 10000 where actno = &#x27;act-002&#x27;;<br><br>以上两条DML语句必须同时成功，或者同时失败，不允许出现一条成功，一条失败。<br>要想保证以上的两条DML语句同时成功或者同时失败，那么就需要使用数据库的“事务机制”。<br><br>7.2、和事务相关的语句只有：DML语句。（ insert delete update）*****<br>为什么？因为它们这三个语句都是和数据库表当中的“数据”相关的。<br>事务的存在是为了保证数据的完整性，安全性。<br><br>7.3、假设所有的业务都能使用1条DML语句搞定，还需要事务机制吗？<br>不需要事务。<br>但实际情况不是这样的，通常一个“事儿（事务【业务】）”需要多条DML语句共同联合完成。<br><br>7.4、事务的特性？<br>事务包括四大特性：ACID<br>A: 原子性：事务是最小的工作单元，不可再分。<br>C: 一致性：事务必须保证多条DML语句同时成功或者同时失败。<br>I：隔离性：事务A与事务B之间具有隔离。<br>D：持久性：持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束。<br><br>7.5、关于事务之间的隔离性<br>事务隔离性存在隔离级别，理论上隔离级别包括4个：<br>第一级别：读未提交（ read uncommitted）<br>对方事务还没有提交，我们当前事务可以读取到对方未提交的数据。<br>读未提交存在脏读（Dirty Read）现象：表示读到了脏的数据。<br>第二级别：读已提交（ read committed）<br>对方事务提交之后的数据我方可以读取到。<br>这种隔离级别解决了: 脏读现象没有了。<br>读已提交存在的问题是：不可重复读。<br>第三级别：可重复读（ repeatable read）<br>这种隔离级别解决了：不可重复读问题。<br>这种隔离级别存在的问题是：读取到的数据是幻象。<br>第四级别：序列化读/串行化读（ serializable） <br>解决了所有问题。<br>效率低。需要事务排队。<br><br>oracle数据库默认的隔离级别是：读已提交。<br>mysql数据库默认的隔离级别是：可重复读。<br><br>7.6、演示事务<br>* mysql事务默认情况下是自动提交的。<br>（什么是自动提交？只要执行任意一条DML语句则提交一次。）怎么关闭自动提交？ start transaction;<br><br>* 准备表：<br>drop table if exists t_user;<br>create table t_user(<br>id int primary key auto_increment,<br>username varchar(255)<br>);<br><br>* 演示：mysql中的事务是支持自动提交的，只要执行一条DML，则提交一次。<br>mysql&gt; insert into t_user(username) values(&#x27;zs&#x27;);<br>Query OK, 1 row affected (0.03 sec)<br>#下面展示的是mysql是自动提交的，执行完一条insert语句之后自动提交，回滚回不去<br>mysql&gt; select * from t_user;<br>+----+----------+<br>| id | username |<br>+----+----------+<br>|  1 | zs       |<br>+----+----------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; rollback;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from t_user;<br>+----+----------+<br>| id | username |<br>+----+----------+<br>|  1 | zs       |<br>+----+----------+<br>1 row in set (0.00 sec)<br>#下面演示的是关闭mysql的自动提交机制<br>#使用 start transaction 表示开始一个事务，一旦使用rollback或者commit则该事务结束。<br>* 演示：使用 start transaction;关闭自动提交机制。<br>mysql&gt; start transaction;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; insert into t_user(username) values(&#x27;lisi&#x27;);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from t_user;<br>+----+----------+<br>| id | username |<br>+----+----------+<br>|  1 | zs       |<br>|  2 | lisi     |<br>+----+----------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; insert into t_user(username) values(&#x27;wangwu&#x27;);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from t_user;<br>+----+----------+<br>| id | username |<br>+----+----------+<br>|  1 | zs       |<br>|  2 | lisi     |<br>|  3 | wangwu   |<br>+----+----------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; rollback;<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; select * from t_user;<br>+----+----------+<br>| id | username |<br>+----+----------+<br>|  1 | zs       |<br>+----+----------+<br>1 row in set (0.00 sec)<br>#上面演示的是回滚（rollback）下面演示提交（commit）<br>-------------------------------------------------------------------<br>mysql&gt; start transaction;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; insert into t_user(username) values(&#x27;wangwu&#x27;);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into t_user(username) values(&#x27;rose&#x27;);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; insert into t_user(username) values(&#x27;jack&#x27;);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from t_user;<br>+----+----------+<br>| id | username |<br>+----+----------+<br>|  1 | zs       |<br>|  4 | wangwu   |<br>|  5 | rose     |<br>|  6 | jack     |<br>+----+----------+<br>4 rows in set (0.00 sec)<br><br>mysql&gt; commit;<br>Query OK, 0 rows affected (0.04 sec)<br><br>mysql&gt; select * from t_user;<br>+----+----------+<br>| id | username |<br>+----+----------+<br>|  1 | zs       |<br>|  4 | wangwu   |<br>|  5 | rose     |<br>|  6 | jack     |<br>+----+----------+<br>4 rows in set (0.00 sec)<br>#此时已经提交rollback只能回滚到上次的提交点<br>mysql&gt; rollback;<br>Query OK, 0 rows affected (0.00 sec)<br><br>mysql&gt; select * from t_user;<br>+----+----------+<br>| id | username |<br>+----+----------+<br>|  1 | zs       |<br>|  4 | wangwu   |<br>|  5 | rose     |<br>|  6 | jack     |<br>+----+----------+<br>4 rows in set (0.00 sec)<br><br>#打开两个dos窗口演示事物隔离级别的效果<br>设置事物的全局隔离级别：<br>set global transaction isolation level read uncommited;<br>查看事务的全局隔离级别：<br>select @@global.tx_isolation;<br><br>* 演示两个事务，假如隔离级别<br>演示第1级别：读未提交<br>set global transaction isolation level read uncommitted;<br>演示第2级别：读已提交<br>set global transaction isolation level read committed;<br>演示第3级别：可重复读<br>set global transaction isolation level repeatable read;<br>演示第4级别：可重复读<br>set global transaction isolation level serializable;<br><br>* mysql远程登录：mysql -h192.168.151.18 -uroot -p444<br></code></pre></td></tr></table></figure><h3 id="8、索引"><a href="#8、索引" class="headerlink" title="8、索引"></a>8、索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs mysql">8.1、什么是索引？有什么用？<br>索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。<br>在数据库方面，查询一张表的时候有两种检索方式：<br>第一种方式：全表扫描<br>第二种方式：根据索引检索（效率很高）<br><br>索引为什么可以提高检索效率呢？<br>其实最根本的原理是缩小了扫描的范围。<br><br>索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中的对象，也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改，这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。<br><br>添加索引是给某一个字段，或者说某些字段添加索引。<br>select ename,sal from emp where ename = &#x27;SMITH&#x27;;<br>当ename字段上没有添加索引的时候，以上sql语句会进行全表扫描，扫描ename字段中所有的值。<br>当ename字段上添加索引的时候，以上sql语句会根据索引扫描，快速定位。<br><br>8.2、怎么创建索引对象？怎么删除索引对象？<br>创建索引对象：<br>create index 索引名称 on 表名(字段名);<br>删除索引对象：<br>drop index 索引名称 on 表名;<br><br>8.3、什么时候考虑给字段添加索引？（满足什么条件）<br>* 数据量庞大。（根据客户的需求，根据线上的环境）<br>* 该字段很少的DML操作。（因为字段进行修改操作，索引也需要维护）<br>* 该字段经常出现在 where子句中。（经常根据哪个字段查询）<br><br>8.4、注意：主键和具有 unique约束的字段自动会添加索引。<br>根据主键查询效率较高。尽量根据主键检索。<br><br>8.5、查看sql语句的执行计划：<br>mysql&gt; explain select ename,sal from emp where sal = 5000;<br>给薪资sal字段添加索引：<br>create index emp_sal_index on emp(sal);<br>mysql&gt; explain select ename,sal from emp where sal = 5000;<br>#加了索引的执行计划和不加索引的执行计划有区别<br>8.6、索引底层采用的数据结构是：B + Tree<br><br>8.7、索引的实现原理？<br>通过B Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的“物理地址”，<br>最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率<br>是最高的。<br>select ename from emp where ename = &#x27;SMITH&#x27;;<br>通过索引转换为：<br>select ename from emp where 物理地址 = 0x3;<br><br>8.8、索引的分类？<br>单一索引：给单个字段添加索引<br>复合索引: 给多个字段联合起来添加1个索引<br>主键索引：主键上会自动添加索引<br>唯一索引：有unique约束的字段上会自动添加索引<br>....<br><br>8.9、索引什么时候失效？<br>select ename from emp where ename like &#x27;%A%&#x27;;<br>模糊查询的时候，第一个通配符使用的是%，这个时候索引是失效的。<br></code></pre></td></tr></table></figure><h3 id="9、视图-view"><a href="#9、视图-view" class="headerlink" title="9、视图(view)"></a>9、视图(view)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs mysql">9.1、什么是视图？<br>站在不同的角度去看到数据。（同一张表的数据，通过不同的角度去看待）。<br><br>9.2、怎么创建视图？怎么删除视图？<br>create view myview as select empno,ename from emp;<br>drop view myview;<br>注意：只有DQL语句才能以视图对象的方式创建出来。<br><br>9.3、对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作的原表）<br>可以对视图进行CRUD操作。<br><br>9.4、面向视图操作？<br>mysql&gt; select * from myview;<br>+-------+--------+<br>| empno | ename  |<br>+-------+--------+<br>|  7369 | SMITH  |<br>|  7499 | ALLEN  |<br>|  7521 | WARD   |<br>|  7566 | JONES  |<br>|  7654 | MARTIN |<br>|  7698 | BLAKE  |<br>|  7782 | CLARK  |<br>|  7788 | SCOTT  |<br>|  7839 | KING   |<br>|  7844 | TURNER |<br>|  7876 | ADAMS  |<br>|  7900 | JAMES  |<br>|  7902 | FORD   |<br>|  7934 | MILLER |<br>+-------+--------+<br>create table emp_bak as select * from emp;<br>create view myview1 as select empno,ename,sal from emp_bak;<br>update myview1 set ename=&#x27;hehe&#x27;,sal=1 where empno = 7369; # 通过视图修改原表数据。<br>delete from myview1 where empno = 7369; # 通过视图删除原表数据。<br><br>9.5、视图的作用？<br>视图可以隐藏表的实现细节。保密级别较高的系统，数据库只对外提供相关的视图，java程序员只对视图对象进行CRUD。<br></code></pre></td></tr></table></figure><h3 id="10、DBA命令（DCL）"><a href="#10、DBA命令（DCL）" class="headerlink" title="10、DBA命令（DCL）"></a>10、DBA命令（DCL）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">10.1、将数据库当中的数据导出<br>在windows的dos命令窗口中执行：（导出整个库）#不是登录到mysql上执行<br>mysqldump bjpowernode&gt;D:\bjpowernode.sql -uroot -p333<br><br>在windows的dos命令窗口中执行：（导出指定数据库当中的指定表）#不是登录到mysql上执行<br>mysqldump bjpowernode emp&gt;D:\bjpowernode.sql -uroot –p123<br>#导出的是sql脚本，可以将这个sql脚本执行创建一个一模一样的表<br>10.2、导入数据<br>create database bjpowernode;<br>use bjpowernode;<br>source D:\bjpowernode.sql<br></code></pre></td></tr></table></figure><h3 id="11、数据库设计三范式（重点内容，面试经常问）"><a href="#11、数据库设计三范式（重点内容，面试经常问）" class="headerlink" title="11、数据库设计三范式（重点内容，面试经常问）"></a>11、数据库设计三范式（重点内容，面试经常问）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs mysql">11.1、什么是设计范式？<br>设计表的依据。按照这个三范式设计的表不会出现数据冗余。<br><br>11.2、三范式都是哪些？<br><br>第一范式：任何一张表都应该有主键，并且每一个字段原子性不可再分。<br>第二范式：建立在第一范式的基础之上，所有非主键字段完全依赖主键，不能产生部分依赖。<br>********处理多对多情况？使用三张表，第三张表示关系表，关系表中有两个外键。********<br>t_student学生表<br>sno(pk)sname<br>-------------------<br>1张三<br>2李四<br>3王五<br><br>t_teacher 讲师表<br>tno(pk)tname<br>---------------------<br>1王老师<br>2张老师<br>3李老师<br><br>t_student_teacher_relation 学生讲师关系表<br>id(pk)sno(fk)tno(fk)<br>----------------------------------<br>113<br>211<br>322<br>423<br>531<br>633<br><br>第三范式：建立在第二范式的基础之上，所有非主键字段直接依赖主键，不能产生传递依赖。<br>一对多？两张表，（一对多中）多对应的那个表加外键。<br>#下面班级和学生是一对多的关系，所以学生表对应的是多，所以学生表加外键<br>班级t_class<br>cno(pk)cname<br>--------------------------<br>1班级1<br>2班级2<br><br>学生t_student<br>sno(pk)snameclassno(fk)<br>---------------------------------------------<br>101张11<br>102张21<br>103张32<br>104张42<br>105张52<br><br>提醒：在实际的开发中，以满足客户的需求为主，有的时候会拿冗余换执行速度。<br><br>11.3、一对一怎么设计？<br><br>一对一设计有两种方案：1.主键共享(pk + fk)<br>t_user_login  用户登录表<br>id(pk)usernamepassword<br>--------------------------------------<br>1zs123<br>2ls456<br><br>t_user_detail 用户详细信息表<br>id(pk+fk)realnametel....<br>------------------------------------------------<br>1张三1111111111<br>2李四1111415621<br><br>一对一设计有两种方案：2.外键唯一(unique)。<br>t_user_login  用户登录表<br>id(pk)usernamepassword<br>--------------------------------------<br>1zs123<br>2ls456<br><br>t_user_detail 用户详细信息表<br>id(pk)realname tel userid(fk+unique)....<br>-----------------------------------------------------------<br>1张三11111111112<br>2李四11114156211<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计蒜客-字符串和日期</title>
    <link href="/2020/02/05/%E8%AE%A1%E8%92%9C%E5%AE%A2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%97%A5%E6%9C%9F/"/>
    <url>/2020/02/05/%E8%AE%A1%E8%92%9C%E5%AE%A2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%97%A5%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<p>计蒜客蓝桥杯训练，字符串和日期专题</p><span id="more"></span><h4 id="字符串中A的数量"><a href="#字符串中A的数量" class="headerlink" title="字符串中A的数量"></a>字符串中A的数量</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp">题面：输入一个字符串，统计其中字符A的数量并输出<br>样例输入：<br>AabdkeaoektA<br>样例输出：<br><span class="hljs-number">2</span><br>    <br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;A&#x27;</span>)<br>            ans++;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//C版本</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> s[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> len,cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br>    len=<span class="hljs-built_in">strlen</span>(s);<span class="hljs-comment">//strlen()时间复杂度是O(n)</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;A&#x27;</span>)<br>            cnt++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,cnt);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="最长的名字"><a href="#最长的名字" class="headerlink" title="最长的名字"></a>最长的名字</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp">题面：N个同学，输出名字最长同学的名字<br>样例输入：<br><span class="hljs-number">3</span><br>Tom<br>Gaofei<br>Lobs<br>样例输出：<br>Gaofei<br>    <br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string s[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,max=<span class="hljs-number">0</span>;<br>    string ans;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;s[i];<br>        <span class="hljs-keyword">if</span>(s[i].<span class="hljs-built_in">length</span>()&gt;max)&#123;<br>            max=s[i].<span class="hljs-built_in">length</span>();<br>            ans=s[i];<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//C版本</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">int</span> anslen;<br><span class="hljs-type">char</span> s[<span class="hljs-number">105</span>],ans[<span class="hljs-number">105</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> N,len;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br>        len=<span class="hljs-built_in">strlen</span>(s);<br>        <span class="hljs-keyword">if</span>(len&gt;anslen)&#123;<br>            anslen=len;<br>            <span class="hljs-built_in">strcpy</span>(ans,s);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp">题面：https:<span class="hljs-comment">//www.jisuanke.com/course/6497/341020</span><br>样例输入：<br>ABCDZ123abcdefz<br>样例输出：<br>BCDEA123bcdefga   <br>    <br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-type">int</span> len=s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i &lt; len;i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;z&#x27;</span>)&#123;<br>            s[i]=<span class="hljs-string">&#x27;a&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;Z&#x27;</span>)<br>            s[i]=<span class="hljs-string">&#x27;A&#x27;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((s[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;s[i]&lt;<span class="hljs-string">&#x27;Z&#x27;</span>)||(s[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;<span class="hljs-string">&#x27;z&#x27;</span>))<br>            s[i]++;<br>    &#125;<br>    cout&lt;&lt;s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//C版本</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-type">char</span> s[<span class="hljs-number">1005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br>    len=<span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;z&#x27;</span>)&#123;<br>            s[i]=<span class="hljs-string">&#x27;a&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;Z&#x27;</span>)<br>            s[i]=<span class="hljs-string">&#x27;A&#x27;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((s[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;s[i]&lt;<span class="hljs-string">&#x27;Z&#x27;</span>)||(s[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;<span class="hljs-string">&#x27;z&#x27;</span>))<br>            s[i]++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="大数的奇偶性判断"><a href="#大数的奇偶性判断" class="headerlink" title="大数的奇偶性判断"></a>大数的奇偶性判断</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp">题面：https:<span class="hljs-comment">//www.jisuanke.com/course/6497/341021</span><br>样例输入：<br><span class="hljs-number">1231393713904</span><br>样例输出：<br>YES<br>    <br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-type">int</span> len=s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-built_in">int</span>(s[len<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)&amp;<span class="hljs-number">1</span>))&#123;<span class="hljs-comment">//!的优先级大于&amp;，0的ASCII码是48（30H）</span><br>        cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符反转"><a href="#字符反转" class="headerlink" title="字符反转"></a>字符反转</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp">题面：将输入的字符串反转。<br>样例输入：<span class="hljs-number">1234567890</span><br>样例输出：<span class="hljs-number">0987654321</span><br>    <br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-type">int</span> len=s.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>) cout&lt;&lt;s[i];<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;s[i]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最后一个单词"><a href="#最后一个单词" class="headerlink" title="最后一个单词"></a>最后一个单词</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp">题面：https:<span class="hljs-comment">//www.jisuanke.com/course/6497/341023</span><br>样例输入：<br>Today is a nice day<br>样例输出：    <br><span class="hljs-number">3</span><br>    <br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    string s;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;s);<span class="hljs-comment">//循环结束后s的内容是最后一个字符串，样例中是day</span><br>    cout&lt;&lt;s.<span class="hljs-built_in">length</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;    <br><span class="hljs-comment">//C版本</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-type">char</span> s[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s)!=EOF);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">strlen</span>(s));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="蓝桥杯真题：十字图"><a href="#蓝桥杯真题：十字图" class="headerlink" title="蓝桥杯真题：十字图"></a>蓝桥杯真题：十字图</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs cpp">题面：https:<span class="hljs-comment">//www.jisuanke.com/course/6497/341024</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> s[<span class="hljs-number">150</span>][<span class="hljs-number">150</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, x, y;<br>    cin &gt;&gt; n;<br>    x = <span class="hljs-number">0</span>;<br>    y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> * n + <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span> * n + <span class="hljs-number">5</span>; j++)<br>        &#123;<br>            s[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n + <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y + <span class="hljs-number">2</span>; j &lt;= y + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            s[x][j] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = x; j &lt;= x + <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            s[j][y + <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = x; j &lt;= x + <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            s[j][y + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &lt;= y + <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            s[x + <span class="hljs-number">2</span>][j] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>; j &lt;= y + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">4</span>; j++)<br>        &#123;<br>            s[x + <span class="hljs-number">2</span>][j] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = x + <span class="hljs-number">2</span>; j &lt;= x + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            s[j][y] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = x + <span class="hljs-number">2</span>; j &lt;= x + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            s[j][y + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &lt;= y + <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            s[x + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>][j] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>; j &lt;= y + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">4</span>; j++)<br>        &#123;<br>            s[x + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>][j] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = x + <span class="hljs-number">4</span>*(n-i)+<span class="hljs-number">2</span>; j &lt;= x + <span class="hljs-number">4</span> * (n-i) + <span class="hljs-number">4</span>; j++)<br>        &#123;<br>            s[j][y + <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = x + <span class="hljs-number">4</span>*(n-i)+<span class="hljs-number">2</span>; j &lt;= x + <span class="hljs-number">4</span> * (n-i) + <span class="hljs-number">4</span>; j++)<br>        &#123;<br>            s[j][y + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y + <span class="hljs-number">2</span>; j &lt;= y + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">2</span>; j++)<br>        &#123;<br>            s[x + <span class="hljs-number">4</span> * (n - i) + <span class="hljs-number">4</span>][j] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>        x+=<span class="hljs-number">2</span>;<br>        y+=<span class="hljs-number">2</span>;<br>    &#125;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> * n + <span class="hljs-number">5</span>; i++)<br>        cout&lt;&lt;s[i]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//标程</span><br><span class="hljs-comment">//观察图形发现，上下对称，左右对称，所以只需要处理左上角即可</span><br><span class="hljs-comment">//对于左上角，也是一个对称图形，找到每一层对应的$的规律就可以了</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> s[<span class="hljs-number">150</span>][<span class="hljs-number">150</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2</span> * (n + <span class="hljs-number">1</span>); ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">2</span> * (n + <span class="hljs-number">1</span>); ++j)<br>        &#123;<br>            s[i][j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; ++i)<br>    &#123;<br>        s[<span class="hljs-number">2</span> * i][<span class="hljs-number">2</span> * i] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        s[<span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>][<span class="hljs-number">2</span> * i] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        s[<span class="hljs-number">2</span> * i][<span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span> * i; j &lt;= <span class="hljs-number">2</span> * (n + <span class="hljs-number">1</span>); j++)<br>        &#123;<br>            s[<span class="hljs-number">2</span> * i - <span class="hljs-number">2</span>][j] = s[j][<span class="hljs-number">2</span> * i - <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;$&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2</span> * (n + <span class="hljs-number">1</span>); ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">2</span> * (n + <span class="hljs-number">1</span>); ++j)<br>        &#123;<br>            s[i][<span class="hljs-number">4</span> * (n + <span class="hljs-number">1</span>) - j] = s[<span class="hljs-number">4</span> * (n + <span class="hljs-number">1</span>) - i][j] = s[<span class="hljs-number">4</span> * (n + <span class="hljs-number">1</span>) - i][<span class="hljs-number">4</span> * (n + <span class="hljs-number">1</span>) - j] = s[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span> * (n + <span class="hljs-number">1</span>); ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, s[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="节假日"><a href="#节假日" class="headerlink" title="节假日"></a>节假日</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp">题面：https:<span class="hljs-comment">//www.jisuanke.com/course/6497/341025</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> day[<span class="hljs-number">13</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;;<br><br><span class="hljs-comment">//将已经知道的阳历节假日记录</span><br><span class="hljs-type">int</span> mm[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">12</span>&#125;;<br><span class="hljs-type">int</span> dd[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">25</span>&#125;;<br><span class="hljs-comment">//日期一直向前走</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">nextday</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;m,<span class="hljs-type">int</span> &amp;d)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(d==day[m])&#123;<br>        m++;<br>        d=<span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> d++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> y,w,m,d,f;<span class="hljs-comment">//f记录的是春节剩余的天数。若f=0则表示不在春节里</span><br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;y;<br>    <span class="hljs-keyword">if</span>((y%<span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; y % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>)||y%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>)&#123;<br>        day[<span class="hljs-number">2</span>]++;<br>    &#125;<br>    <span class="hljs-comment">//输入阴历节假日的阳历日期</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">6</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>        cin&gt;&gt;mm[i]&gt;&gt;dd[i];<br>    &#125;<br>    cin&gt;&gt;w;<br>    m=<span class="hljs-number">1</span>;d=<span class="hljs-number">1</span>;<span class="hljs-comment">//当前是1月1号</span><br>    f=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(m!=<span class="hljs-number">13</span>)&#123;<br>        <span class="hljs-comment">//1、判断是不是春节</span><br>        <span class="hljs-comment">//2、判断春节剩余的天数</span><br>        <span class="hljs-comment">//3、判断是不是周末</span><br>        <span class="hljs-comment">//4、判断是不是节假日</span><br>        <span class="hljs-comment">//首先判断春节的状态，此处最为巧妙应当好好理解</span><br>        <span class="hljs-keyword">if</span>(m==mm[<span class="hljs-number">6</span>]&amp;&amp;d==dd[<span class="hljs-number">6</span>])&#123;<span class="hljs-comment">//若在春节里</span><br>            ans++;<br>            f=<span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(f)&#123;<span class="hljs-comment">//f的值不为0，表示现在在春节里所以要将ans+1，将春节剩余的天数-1</span><br>            ans++;<br>            f--;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(w==<span class="hljs-number">6</span>||w==<span class="hljs-number">7</span>)&#123;<span class="hljs-comment">//判断是不是双休日</span><br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>                <span class="hljs-keyword">if</span>(m==mm[i]&amp;d==dd[i])&#123;<br>                    ans++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">nextday</span>(m,d);<br>        <span class="hljs-comment">//修改现在是星期几</span><br>        w++;<br>        <span class="hljs-keyword">if</span>(w==<span class="hljs-number">8</span>)<br>            w=<span class="hljs-number">1</span>;<br>    &#125;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝桥杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法基础-递归</title>
    <link href="/2020/02/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E9%80%92%E5%BD%92/"/>
    <url>/2020/02/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<p> 两个递归题</p><span id="more"></span><h3 id="总体思想："><a href="#总体思想：" class="headerlink" title="总体思想："></a>总体思想：</h3><ul><li>待求解问题的解 -&gt; 输入变量 x 的函数 f(x)</li><li>通过寻找函数 g() ，使得 f(x) &#x3D; g(f(x-1))</li><li>已知 f(0) 的值，就可以通过 f(0) 和 g() 求出 f(x) 的值</li></ul><p>推广：</p><ul><li>扩展到多个输入变量x，y，z等，x-1也可以推广到<code>x-x1</code>，只要递归朝着’出口’方向即可</li></ul><p>枚举与递归的区别：</p><ol><li><p>枚举：</p><ul><li>子问题之间是横向的，同类的关系。</li></ul></li><li><p>递归：</p><ul><li>子问题与原问题之间是纵向的，同类的关系。</li><li>语法形式上：1、直接调用 2、间接调用</li></ul></li></ol><p>递归的三个要点：</p><ol><li><p>递归式</p><p>将原问题划分成子问题</p></li><li><p>递归出口</p><p>递归终止条件，即最小子问题的求解，可以允许多个出口</p></li><li><p>界函数</p><p>问题规模变化的函数，保证递归规模，向出口条件靠拢。</p></li></ol><p>求阶乘的递归程序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">factorial</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> n*<span class="hljs-built_in">factorial</span>(n<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>阶乘的栈：通过栈的方式将递归的状态保存下来，最终由栈顶（递归出口）问题的解递推出问题的解。</p><p>递归的关键：</p><ul><li>找出递归公式。</li><li>找到递归终止条件。</li></ul><p>函数的局部变量是存在栈上的，若局部变量的体积较大可能会引起栈的溢出。</p><h3 id="小游戏poj-1101"><a href="#小游戏poj-1101" class="headerlink" title="小游戏poj-1101"></a>小游戏<code>poj-1101</code></h3><ol><li><p>迷宫求解问题</p><p>自相似性表现在每走一步的探测方式相同，可以用递归方法求解</p></li><li><p>通过枚举方式找到从起点到终点的路径。朝一个方向下去：</p><p>​如果走不通，则换个方向走，四个方向都走不通，则回到上一步的地方，换个方向走，依次走下去，直到走到终点。</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp">计算路径数目：<br>普通迷宫问题的路径数目是经过的格子数目。<br>而该问题路径只包含水乎或者竖直的直线段，所以需要记录每一步走的方向。<br> 如果上一步走的方向和这一步走的方向相同，递归搜索时路径数不变，否则路径数加<span class="hljs-number">1</span><br>路径只包含水平或者竖直的直线段.路径不能穿过别的游戏卡片.但是允许路径临时的离开矩形板所以在矩形板最外层增加一圈格子，路径可以通过这些新增加的格子（类似于枚举的熄灯问题）<br>    <br>描述迷宫：<br><span class="hljs-number">1.</span>设置迷宫为二维数组board[][]，数组的值是：<br>空格：代表这个地方没有游戏卡片<br> x：代表这个地方有游戏卡片<br><span class="hljs-number">2.</span>在搜索过程中，用另外一个二维数mark[][]标记格子是否已经走过了mark[i]j]=<span class="hljs-number">0</span><span class="hljs-comment">//格子（i，j）未走过</span><br>mark[i][j]=<span class="hljs-number">1</span><span class="hljs-comment">//格子（i，j）已经走过</span><br><span class="hljs-number">3.</span><span class="hljs-type">int</span> minstep，w，h；<span class="hljs-comment">//全局变量</span><br><span class="hljs-comment">//minstep，记录从起点到达终点最少路径数，初始化为一个很大的数</span><br><span class="hljs-comment">//w，h矩形板的宽度和高度</span><br><br>设置搜索方向顺序是东，南，西，北<br><span class="hljs-type">int</span> to[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>]=&#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;，&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;，&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;，&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;&#125;;<span class="hljs-comment">//北东南西，顺时针</span><br><span class="hljs-comment">//now_x，now_y，当前位置</span><br><span class="hljs-comment">//x，y下一步位置</span><br><span class="hljs-keyword">for</span>（i=<span class="hljs-number">0</span>；i&lt;<span class="hljs-number">4</span>；i++）&#123;<br><span class="hljs-type">int</span> x = now_x + to[i][<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> y = now_y + to[i][<span class="hljs-number">1</span>];<br>    f=i;<span class="hljs-comment">//方向，0，1，2，3分别表示北，东，南，西</span><br>&#125;<br><br>判断新位置（x，y）是否有效<br>T1:(x,y)在边界之内<br>（x&gt;<span class="hljs-number">-1</span>）&amp;&amp;（x&lt;W+<span class="hljs-number">2</span>）&amp;&amp;（y&gt;<span class="hljs-number">-1</span>）&amp;&amp;（y&lt;h+<span class="hljs-number">2</span>）<br>T2:该位置没有游戏卡片并且未曾走过<br>((board[y][x]==<span class="hljs-string">&#x27; &#x27;</span>)&amp;&amp;(mark[y][x]==<span class="hljs-literal">false</span>))<br>T3:已经到达终点<br>(x==end_x)&amp;&amp;(y==end_y)&amp;&amp;(board[y][x]==<span class="hljs-string">&#x27;X&quot;)</span><br><span class="hljs-string">综上，(x,y)有效的条件是T1&amp;&amp;（T2||T3）</span><br><span class="hljs-string">if (((x &gt; -1) &amp;&amp; (x &lt; w + 2) &amp;&amp; (y &gt; -1) &amp;&amp; (y &lt; h + 2)) &amp;&amp;</span><br><span class="hljs-string">             (((board[y][x] == &#x27;</span> <span class="hljs-string">&#x27;) &amp;&amp; (mark[y][x] == false)) ||</span><br><span class="hljs-string">              ((x == end_x) &amp;&amp; (y == end_y) &amp;&amp; (board[y][x] == &#x27;</span>X<span class="hljs-number">&#x27;</span>))))&#123;<br>    <span class="hljs-comment">/*Code*/</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">递归构造函数：<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Search</span><span class="hljs-params">(<span class="hljs-type">int</span> now_x,<span class="hljs-type">int</span> now_y,<span class="hljs-type">int</span> end_x,<span class="hljs-type">int</span> end_y,<span class="hljs-type">int</span> step,<span class="hljs-type">int</span> f)</span></span>;<br><span class="hljs-comment">//now_x，now_y当前位置//end_x，end_y结束位置</span><br><span class="hljs-comment">//step已经走过的路径数目</span><br>f从上一步走到(now_x,now_y)时的方向       <br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXIN 75</span><br><span class="hljs-type">int</span> minstep, w, h, to[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-type">char</span> board[MAXIN + <span class="hljs-number">2</span>][MAXIN + <span class="hljs-number">2</span>]; <span class="hljs-comment">//定义矩形板</span><br><span class="hljs-type">bool</span> mark[MAXIN + <span class="hljs-number">2</span>][MAXIN + <span class="hljs-number">2</span>];  <span class="hljs-comment">//定义标记数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Search</span><span class="hljs-params">(<span class="hljs-type">int</span> now_x, <span class="hljs-type">int</span> now_y, <span class="hljs-type">int</span> end_x, <span class="hljs-type">int</span> end_y, <span class="hljs-type">int</span> step, <span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (step &gt; minstep)<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">//当前路径数大于minstep，返回（优化策略）</span><br>    <span class="hljs-keyword">if</span> (now_x == end_x &amp;&amp; now_y == end_y)<br>    &#123;                       <span class="hljs-comment">//到达终点</span><br>        <span class="hljs-keyword">if</span> (minstep &gt; step) <span class="hljs-comment">//更新最小路径</span><br>            minstep = step;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> x = now_x + to[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> y = now_y + to[i][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (((x &gt; <span class="hljs-number">-1</span>) &amp;&amp; (x &lt; w + <span class="hljs-number">2</span>) &amp;&amp; (y &gt; <span class="hljs-number">-1</span>) &amp;&amp; (y &lt; h + <span class="hljs-number">2</span>)) &amp;&amp;<br>             (((board[y][x] == <span class="hljs-string">&#x27; &#x27;</span>) &amp;&amp; (mark[y][x] == <span class="hljs-literal">false</span>)) ||<br>              ((x == end_x) &amp;&amp; (y == end_y) &amp;&amp; (board[y][x] == <span class="hljs-string">&#x27;X&#x27;</span>))))<br>        &#123;<br>            mark[y][x] = <span class="hljs-literal">true</span>; <span class="hljs-comment">//如果新位置有效标记该位置</span><br>            <span class="hljs-comment">//已经过上一步方向和当前方向相同</span><br>            <span class="hljs-comment">//则递归搜索时step不变</span><br>            <span class="hljs-keyword">if</span> (f == i)<br>                <span class="hljs-built_in">Search</span>(x, y, end_x, end_y, step, i);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">Search</span>(x, y, end_x, end_y, step + <span class="hljs-number">1</span>, i);<br>            mark[y][x] = <span class="hljs-literal">false</span>; <span class="hljs-comment">//回溯，该位置未曾走过（递归结束不是有解，就是无解）</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">// freopen(&quot;a.txt&quot;,&quot;w&quot;,stdout);</span><br>    <span class="hljs-type">int</span> Boardnum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w, &amp;h))<br>    &#123; <span class="hljs-comment">//读入数据</span><br>        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> &amp;&amp; h == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//初始化左边和上边的格子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAXIN + <span class="hljs-number">2</span>; i++)<br>            board[<span class="hljs-number">0</span>][i] = board[i][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= h; i++) <span class="hljs-comment">//读入矩形板的布局</span><br>        &#123;<br>            <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//吃掉回车</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= w; j++)<br>                board[i][j] = <span class="hljs-built_in">getchar</span>();<br>        &#125;<br>        <span class="hljs-comment">//在矩形板最外层增加一圈格子</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= w; i++)<br>            board[h+<span class="hljs-number">1</span>][i+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=h;i++)<br>            board[i+<span class="hljs-number">1</span>][w+<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27; &#x27;</span>;<br><br>        Boardnum++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Board #%d:\n&quot;</span>, Boardnum);<br>        <span class="hljs-type">int</span> begin_x,begin_y,end_x,end_y,count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(cin&gt;&gt;begin_x&gt;&gt;begin_y&gt;&gt;end_x&gt;&gt;end_y&amp;&amp;begin_x&gt;<span class="hljs-number">0</span>)&#123;<br>            count++;<br>            minstep=<span class="hljs-number">100000</span>;<br>            <span class="hljs-built_in">memset</span>(mark,<span class="hljs-literal">false</span>,<span class="hljs-built_in">sizeof</span>(mark));<br>            <span class="hljs-built_in">Search</span>(begin_x,begin_y,end_x,end_y,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>);<br><br>            <span class="hljs-keyword">if</span>(minstep&lt;<span class="hljs-number">100000</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pair %d: %d segments.\n&quot;</span>,count,minstep);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pair %d: impossible.\n&quot;</span>,count);<br>        &#125;<br>        <span class="hljs-comment">//Output a blank line after each board</span><br>        cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="棋盘分割poj-1191"><a href="#棋盘分割poj-1191" class="headerlink" title="棋盘分割poj-1191"></a>棋盘分割<code>poj-1191</code></h3>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法基础-枚举</title>
    <link href="/2020/02/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E6%9E%9A%E4%B8%BE/"/>
    <url>/2020/02/05/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E6%9E%9A%E4%B8%BE/</url>
    
    <content type="html"><![CDATA[<p>两个枚举题</p><span id="more"></span><p>枚举中的三个关键问题：</p><ol><li>给出解空间，建立简洁的数据模型。</li><li>减少搜索的空间。</li><li>采用合适的搜索顺序。</li></ol><h3 id="熄灯问题POJ1222"><a href="#熄灯问题POJ1222" class="headerlink" title="熄灯问题POJ1222"></a>熄灯问题<code>POJ1222</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1</span>、同一个按钮如果按两次的话将抵消第一次按下时的结果，所以每个按钮只需要按下一次<br><span class="hljs-number">2</span>、各个按钮被按下的顺序对最终结果无影响    <br><span class="hljs-number">3</span>、对第<span class="hljs-number">1</span>行中每盏点亮的灯，按下第<span class="hljs-number">2</span>行对应的按钮，就可以熄灭第<span class="hljs-number">1</span>行的全部灯<br><span class="hljs-number">4</span>、如此重复下去，可以熄灭第<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>行的全部灯<br>解法：<br>    <span class="hljs-number">1</span>、枚举所有可能的按钮，<span class="hljs-number">2</span>的<span class="hljs-number">30</span>次方，不可能<br>    <span class="hljs-number">2</span>、减少枚举的状态数目（<span class="hljs-comment">/*找到局部状态枚举*/</span>）<br>    基本思路：如果存在某个局部，一旦这个局部的状态被确定，那么剩余其他部分的状态只能是确定的一种，或者不多的）种.那么就只需枚举这个局部的状态即可<br>    经过观察，发现第<span class="hljs-number">1</span>行就是这样的一个“局部”<br>    因为第<span class="hljs-number">1</span>行的各开关状态确定的情况下，这些开关作用过后，将导致第<span class="hljs-number">1</span>行某些灯是亮的，某些灯是灭的。<br>    要熄灭第<span class="hljs-number">1</span>行某个亮着的灯（假设位于第i列），那么唯一的办法就公<br>是按下第<span class="hljs-number">2</span>行第i列的开关（因为第<span class="hljs-number">1</span>行的开关已经用过了，而第<span class="hljs-number">3</span>行及其后的开关不会影响到第<span class="hljs-number">1</span>行）<br>    为了使第<span class="hljs-number">1</span>行的灯全部熄灭，第<span class="hljs-number">2</span>行的合理开关状态就是唯一的，以此类推即可确定所有位置的开关按下情况。<br>    第一行状态定下后所有状态就确定，类推出倒数第二行的状态，枚举最后一行状态查看是否能熄灭最后一行的灯即可，这时第一行枚举的次数是<span class="hljs-number">2</span>的<span class="hljs-number">6</span>次方，<span class="hljs-number">64</span>种状态。按行枚举执行次数：<span class="hljs-number">64</span>*<span class="hljs-number">5</span>*<span class="hljs-number">6</span>，按列枚举执行次数：<span class="hljs-number">32</span>*<span class="hljs-number">6</span>*<span class="hljs-number">5</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> puzzle[<span class="hljs-number">6</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> press[<span class="hljs-number">6</span>][<span class="hljs-number">8</span>];<br><span class="hljs-comment">//0 indicates that the light is off</span><br><span class="hljs-comment">//0 indicate buttons, which are not pressed.</span><br><span class="hljs-comment">//目的是把所有的灯全部关掉</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Guess</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=<span class="hljs-number">1</span>;r&lt;<span class="hljs-number">5</span>;r++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;c&lt;<span class="hljs-number">7</span>;c++)&#123;<br>            press[r+<span class="hljs-number">1</span>][c]=(puzzle[r][c]+press[r][c]+press[r][c+<span class="hljs-number">1</span>]+press[r<span class="hljs-number">-1</span>][c]+press[r][c<span class="hljs-number">-1</span>])%<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>  c = <span class="hljs-number">1</span>; c &lt;=<span class="hljs-number">6</span> ; c++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>((press[<span class="hljs-number">5</span>][c]+press[<span class="hljs-number">5</span>][c+<span class="hljs-number">1</span>]+press[<span class="hljs-number">5</span>][c<span class="hljs-number">-1</span>]+press[<span class="hljs-number">4</span>][c])%<span class="hljs-number">2</span>!=puzzle[<span class="hljs-number">5</span>][c])<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enumrate</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//此处是关键，必须再次初始化。之前的操作会改变press数组的值</span><br>    <span class="hljs-keyword">for</span>(c=<span class="hljs-number">1</span>; c&lt;<span class="hljs-number">7</span>; c++) &#123;<br>        press[<span class="hljs-number">1</span>][c]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">Guess</span>()==<span class="hljs-literal">false</span>)&#123;<br>        press[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]++;<br>        c=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(press[<span class="hljs-number">1</span>][c]&gt;<span class="hljs-number">1</span>)&#123;<br>            press[<span class="hljs-number">1</span>][c]=<span class="hljs-number">0</span>;<br>            c++;<br>            press[<span class="hljs-number">1</span>][c]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br> <span class="hljs-comment">//   freopen(&quot;a.txt&quot;,&quot;w&quot;,stdout);</span><br>    <span class="hljs-built_in">memset</span>(puzzle,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(puzzle));<br>    <span class="hljs-built_in">memset</span>(press,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(press));<br>    <span class="hljs-type">int</span> cases;<br>    cin&gt;&gt;cases;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=cases;k++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">6</span>;j++)&#123;<br>            cin&gt;&gt;puzzle[i][j];<br>        &#125;<br>        <span class="hljs-built_in">enumrate</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PUZZLE #%d\n&quot;</span>,k);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">6</span>;j++)&#123;<br>            <span class="hljs-keyword">if</span>(j!=<span class="hljs-number">6</span>)<br>            cout&lt;&lt;press[i][j]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-keyword">else</span> <br>            cout&lt;&lt;press[i][j]&lt;&lt;endl;<br>        &#125;<br>        <span class="hljs-comment">// cout&lt;&lt;endl;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="讨厌的青蛙POJ1054"><a href="#讨厌的青蛙POJ1054" class="headerlink" title="讨厌的青蛙POJ1054"></a>讨厌的青蛙<code>POJ1054</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,r,c;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PLANT</span><br>&#123;<br>    <span class="hljs-type">int</span> x,y;<br>&#125;;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-type">const</span> PLANT &amp;p1,<span class="hljs-type">const</span> PLANT p2)&#123;<br>    <span class="hljs-keyword">if</span>(p1.x==p2.x)<br>    <span class="hljs-keyword">return</span> p1.y&lt;p2.y;<br>    <span class="hljs-keyword">return</span> p1.x&lt;p2.x;<br>&#125;<br><br>PLANT plants[<span class="hljs-number">5005</span>];<br>PLANT plant;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">searchPath</span><span class="hljs-params">(PLANT secPlant,<span class="hljs-type">int</span> dx,<span class="hljs-type">int</span> dy)</span></span>&#123;<br>    PLANT plant;<br>    <span class="hljs-type">int</span> steps;<br>    plant.x=secPlant.x+dx;<br>    plant.y=secPlant.y+dy;<br>    steps=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(plant.x&lt;=r&amp;&amp;plant.x&gt;=<span class="hljs-number">1</span>&amp;&amp;plant.y&lt;=c&amp;&amp;plant.y&gt;=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">binary_search</span>(plants,plants+n,plant))&#123;<br>            steps=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        plant.x+=dx;<br>        plant.y+=dy;<br>        steps++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> steps;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">int</span> max=<span class="hljs-number">2</span>;<br>    cin&gt;&gt;r&gt;&gt;c&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;plants[i].x&gt;&gt;plants[i].y;<br>    &#125;<br>    <span class="hljs-comment">//排序可以有效减少枚举的次数</span><br>    <span class="hljs-comment">//将水稻按x坐标从小到大排序，x坐标相同按y从小到大排序</span><br>    <span class="hljs-built_in">sort</span>(plants,plants+n);<br>    <span class="hljs-comment">//依次选取两个点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-2</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;n<span class="hljs-number">-1</span>;j++)&#123;<br>            <span class="hljs-type">int</span> dx=plants[j].x-plants[i].x;<br>            <span class="hljs-type">int</span> dy=plants[j].y-plants[i].y;<br>            <span class="hljs-comment">//找到第一个点之前的一个点</span><br>            <span class="hljs-type">int</span> px=plants[i].x-dx;<br>            <span class="hljs-type">int</span> py=plants[i].y-dy;<br>            <span class="hljs-keyword">if</span>(px&lt;=r&amp;&amp;px&gt;=<span class="hljs-number">1</span>&amp;&amp;py&lt;=c&amp;&amp;py&gt;=<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">//第一点前一点在稻田里</span><br>            <span class="hljs-comment">//说明本次选的第二点导致的x方向步长不合理</span><br>            <span class="hljs-comment">//取下一个点作为第二个点</span><br>            <span class="hljs-keyword">if</span>(plants[i].x+(max<span class="hljs-number">-1</span>)*dx&gt;r)<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//退出内层循环</span><br>            <span class="hljs-comment">//x方向过早越界了，说明本次选的第二点不成立（步长太大）</span><br>            <span class="hljs-comment">//如果换下一个点作为第二点，x方向步长只会更大，更不成立，所以应该</span><br>            <span class="hljs-comment">//认为本次选的第一个点必然是不成立的，那么取下一个点作为第一点再试。</span><br>            py=plants[i].y+(max<span class="hljs-number">-1</span>)*dy;<br>            <span class="hljs-keyword">if</span>(py&gt;c||py&lt;<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> steps=<span class="hljs-built_in">searchPath</span>(plants[j],dx,dy);<br>            <span class="hljs-keyword">if</span>(steps&gt;max)<br>                max=steps;<br>        &#125;  <br>    &#125;<br>    <span class="hljs-keyword">if</span>(max==<span class="hljs-number">2</span>) max=<span class="hljs-number">0</span>;<br>        cout&lt;&lt;max&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown简介</title>
    <link href="/2020/02/03/Markdown%E7%AE%80%E4%BB%8B/"/>
    <url>/2020/02/03/Markdown%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>Markdown简介</p><span id="more"></span><ul><li>这是无序列表</li></ul><ol><li>这是有序列表</li></ol><p>这是表格</p><table><thead><tr><th align="center">A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td align="center">D</td><td>E</td><td>F</td></tr><tr><td align="center">G</td><td>H</td><td>I</td></tr><tr><td align="center">J</td><td>K</td><td>L</td></tr></tbody></table><p>这是插入的图片</p><p><img src="/..%5Cimages%5C1.jpg" alt="这是图片描述"></p><p><img src="https://dp2px.com/json-data/banner/blog-build.png" alt="第二张图片"><br><img src="https://dp2px.com/json-data/banner/blog-build.png" alt="使用img插入图片" width=200></p><p><strong>加粗</strong><br><em><strong>斜体加粗</strong></em><br><del>删除线</del></p><hr><p>分割线<br><a href="https://www.baidu.com/">设置超链接</a><br>Markdown可以设置流程图但是太过复杂不建议使用<br><a href="https://dp2px.com/">参考博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习笔记</title>
    <link href="/2020/02/02/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/02/02/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Git学习笔记</p><span id="more"></span><p>Git是一款免费、开源的分布式版本控制系统</p><p>GitHub主要提供基于Git的版本托管服务。Git只是Github上用来管理项目的一个工具而已。</p><p>可以用Git bash、tortoisegit、IDEA和github、gitee等代码托管平台连接</p><hr><h4 id="Git初始化"><a href="#Git初始化" class="headerlink" title="Git初始化"></a>Git初始化</h4><ol><li><h5 id="基本信息设置"><a href="#基本信息设置" class="headerlink" title="基本信息设置"></a>基本信息设置</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、设置用户名  git config --global user.name<span class="hljs-string">&quot;your name&quot;</span> <br><span class="hljs-number">2</span>、设置用户名邮箱  git config --global user.email<span class="hljs-string">&quot;zshlmy@163.com&quot;</span><br><span class="hljs-number">3</span>、查看设置   git config --<span class="hljs-built_in">list</span><br></code></pre></td></tr></table></figure></li><li><h5 id="初始化新的Git本地仓库"><a href="#初始化新的Git本地仓库" class="headerlink" title="初始化新的Git本地仓库"></a>初始化新的Git本地仓库</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、创建文件夹  <br>    mkdir folder<br><span class="hljs-number">2</span>、在文件夹内初始化Git（创建Git仓库）<br>    cd folder<br>    git init  <span class="hljs-comment">//执行此命令则会在folder生成 .git文件夹 用来存储仓库的信息</span><br></code></pre></td></tr></table></figure></li><li><h5 id="向本地仓库中添加文件"><a href="#向本地仓库中添加文件" class="headerlink" title="向本地仓库中添加文件"></a>向本地仓库中添加文件</h5><h6 id="本地仓库三个区域"><a href="#本地仓库三个区域" class="headerlink" title="本地仓库三个区域"></a>本地仓库三个区域</h6><p><strong>1、工作区：</strong>添加、编辑、修改文件等动作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#工作区是项目的根目录，不包括.git在内的其他文件</span><br>$ <span class="hljs-built_in">touch</span> filename  <span class="hljs-comment">#新建文件  rm filename 删除文件</span><br>$ git status  <span class="hljs-comment">#查看状态</span><br>$ git add <span class="hljs-string">&quot;文件名&quot;</span>  <span class="hljs-comment">#将文件提交到暂存区</span><br>$ git add .  <span class="hljs-comment">#添加所有可以添加的文件</span><br></code></pre></td></tr></table></figure><p><strong>2、暂存区（缓存区）：</strong>暂存已经修改的文件最后统一提交到Git仓库中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#暂存区是一个看不见的区域，git add命令就是将文件添加到该区域，git status命令可以查看当前暂存区的文件。</span><br>$ git status  <span class="hljs-comment">#查看状态</span><br>$ git commit -m <span class="hljs-string">&quot;提交描述&quot;</span>  <span class="hljs-comment">#将文件从暂存区提交到仓库</span><br></code></pre></td></tr></table></figure><p><strong>3、Git Repository（本地Git仓库）：</strong>最终确定的文件保存到仓库，成为一个新的版本并且对他人可见。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#本地仓库（repository）：指在工作目录下创建的一个.git目录，这是一个隐藏目录。</span><br><span class="hljs-comment">#git commit-m&quot;日志&quot; 可以将暂存区的代码提交到本地仓库。git push -u origin master就是将本地仓库的代码推送到远程仓库</span><br>$ git push  <span class="hljs-comment">#将本地仓库提交到远程</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">git文件的<span class="hljs-number">3</span>种状态<br>。已修改（modified），存在于工作区，文件修改后的状态<br>。已暂存（staged），存在于暂存区，采用git add命令后的状态<br>。已提交（committed），存在于本地仓库，采用git commit命令后的状态<br></code></pre></td></tr></table></figure><p><strong>4、远程仓库</strong></p><hr></li><li><h5 id="修改仓库文件（本地仓库）（熟悉Linux命令）"><a href="#修改仓库文件（本地仓库）（熟悉Linux命令）" class="headerlink" title="修改仓库文件（本地仓库）（熟悉Linux命令）"></a>修改仓库文件（本地仓库）（熟悉Linux命令）</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、vim filename  <span class="hljs-comment">//使用vim编辑修改文件</span><br>   cat filename  <span class="hljs-comment">//查看文件内容</span><br><span class="hljs-number">2</span>、git status<br>   git add filename  <span class="hljs-comment">//添加到暂存区</span><br><span class="hljs-number">3</span>、git status<br>   git commit -m <span class="hljs-string">&quot;提交描述&quot;</span>  <span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure></li><li><h5 id="删除仓库文件（本地仓库）"><a href="#删除仓库文件（本地仓库）" class="headerlink" title="删除仓库文件（本地仓库）"></a>删除仓库文件（本地仓库）</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、删除文件<br>    rm -rf filename<br><span class="hljs-number">2</span>、从Git中删除文件<br>    git rm filename   <br><span class="hljs-number">3</span>、提交操作<br>    git commit -m<span class="hljs-string">&quot;提交描述&quot;</span><br></code></pre></td></tr></table></figure></li><li><h4 id="Git管理远程仓库"><a href="#Git管理远程仓库" class="headerlink" title="Git管理远程仓库"></a>Git管理远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#第一种方式</span><br>1、本地创建文件夹执行 $ git init 将文件夹初始化为本地仓库。对本地仓库可以增删改查。<br>2、在github或gitee上面创建空的仓库壳子<br>3、git remote add origin &lt;仓库地址&gt;  <span class="hljs-comment">#将本地仓库和远程仓库进行关联</span><br>4、远程仓库与本地仓库合并<br>先将远程仓库的文件同步到本地一次，否则直接推会报错<br> $ git pull --rebase origin master<span class="hljs-comment">#表示从远程master分支拉取代码与本地仓库合并。</span><br>再将本地仓库内容推到远程<br> $ git push -u origin master<span class="hljs-comment">#push表示推送到远程分支</span><br> <br>$ git push origin master<br><span class="hljs-comment">#完整写法，远程分支若不存在则会被创建</span><br>$ git push origin<br><span class="hljs-comment">#远程仓库与本地仓库 存在 分支最终关系的写法</span><br>$ git push<br><span class="hljs-comment">#远程仓库只有一个分支，最简单的写法</span><br> <br><span class="hljs-comment">#第二种方式</span><br>1、克隆操作  //目的：将远程仓库（github对应的项目）复制到本地<br>$ git <span class="hljs-built_in">clone</span> 仓库地址  //仓库地址在github网页获取  https<br>2、修改或添加相应的文件<br>$ <span class="hljs-built_in">touch</span> filename          //创建文件<br>$ git add filename        //添加到暂存区<br>$ git commit -m<span class="hljs-string">&quot;提交描述&quot;</span>  //添加到本地仓库<br>3、提交到远程仓库<br>$ git push<br><br>若报错 用户名密码输入：<br>    $ vi .git/config<br>将 url = https://github.com/用户名/仓库名.git<br>(url = https://github.com/ZshLmy/test.git)<br>修改为<br>   url = https://用户名:密码@github.com/用户名/仓库名.git<br><br>  https和ssh方法的区别：<br>         https://blog.csdn.net/u013778905/article/details/83501204<br>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;email地址&quot;</span>  <span class="hljs-comment">#生成钥匙</span><br><span class="hljs-comment"># 测试github</span><br>$ ssh -T git@github.com<br><span class="hljs-comment"># 测试gitee</span><br>$ ssh -T git@gitee.com<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo创建个人博客</title>
    <link href="/2020/01/31/hexo%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/01/31/hexo%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>使用hexo创建个人博客简要教程</p><span id="more"></span><h1 id="hexo创建个人博客"><a href="#hexo创建个人博客" class="headerlink" title="hexo创建个人博客"></a><code>hexo</code>创建个人博客</h1><h2 id="A、安装与基础应用"><a href="#A、安装与基础应用" class="headerlink" title="A、安装与基础应用"></a>A、安装与基础应用</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>、安装git<br><br><span class="hljs-number">2</span>、安装nodejs（安装时会自动安装npm组件）<br><br><span class="hljs-number">3</span>、使用npm安装淘宝镜像cnpm    命令：npm install -g cnpm --registry=https:<span class="hljs-comment">//registry.npm.taobao.org</span><br><br><span class="hljs-number">4</span>、使用cnpm安装hexo  命令：cnpm install -g hexo-cli<br><br></code></pre></td></tr></table></figure><!--more--><h4 id="正式使用hexo搭建博客"><a href="#正式使用hexo搭建博客" class="headerlink" title="正式使用hexo搭建博客"></a>正式使用<code>hexo</code>搭建博客</h4><p>以下的操作均是在博客文件夹<folder>中</p><h3 id="2、hexo安装完成后即可新建网站"><a href="#2、hexo安装完成后即可新建网站" class="headerlink" title="2、hexo安装完成后即可新建网站"></a>2、<code>hexo</code>安装完成后即可新建网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init &lt;folder&gt;<br>$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ cnpm install <br><span class="hljs-comment">#执行此命令是将package.json指定的依赖包安装到本地的node_modules文件夹下</span><br><span class="hljs-comment"># 以上三行命令执行后既在folder中建好了网站</span><br>$ hexo s <span class="hljs-comment">#使用该命令预览博客</span><br></code></pre></td></tr></table></figure><h3 id="3、hexo命令"><a href="#3、hexo命令" class="headerlink" title="3、hexo命令"></a>3、<code>hexo</code>命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new [layout] &lt;title&gt;<br><span class="hljs-comment"># 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。例如：hexo new &quot;post title with whitespace&quot;</span><br><span class="hljs-comment">#新建的博客保存在 ~/source/_posts/文件夹下</span><br>$ hexo clean<br><span class="hljs-comment"># 如果修改过文件内容，需要通过如下命令清除已经生成的静态文件，重新生成</span><br>$ hexo g<br>$ hexo s <span class="hljs-comment">#预览博客</span><br><br></code></pre></td></tr></table></figure><h3 id="4、将博客网站部署到github上"><a href="#4、将博客网站部署到github上" class="headerlink" title="4、将博客网站部署到github上"></a>4、将博客网站部署到<code>github</code>上</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、新建仓库，仓库名必须是  github用户名.github.io<br>2、在博客所在的文件夹下安装 部署插件 $ cnpm install --save hexo-deployer-git<br>3、配置  _config.yml<br>    在该文件的最底部Deployment处<br>    deploy:<br><span class="hljs-built_in">type</span>: git <span class="hljs-comment">#每个冒号后面要加空格 </span><br>        repo: github https仓库地址<br>        branch: master<br>4、部署到github上<br>     hexo d<br></code></pre></td></tr></table></figure><h3 id="5、主题"><a href="#5、主题" class="headerlink" title="5、主题"></a>5、主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">下载主题<br>$ git <span class="hljs-built_in">clone</span> <span class="hljs-string">&quot;主题的github地址&quot;</span> themes/<span class="hljs-string">&quot;主题名&quot;</span><br><span class="hljs-comment">#要将主题下载到themes文件夹下</span><br>将 _config.yml中的theme（在最后几行）改成自己下载的主题即可<br>    theme:yilia<br>$ hexo clean<br>$ hexo g<br>$ hexo s<br>$ hexo d <span class="hljs-comment">#推到github上  若使用https连接不成功可以使用SSH</span><br></code></pre></td></tr></table></figure><h3 id="6、部署到Gitee"><a href="#6、部署到Gitee" class="headerlink" title="6、部署到Gitee"></a>6、部署到<code>Gitee</code></h3><p><a href="https://blog.csdn.net/Dove88888888/article/details/89027339">https://blog.csdn.net/Dove88888888/article/details/89027339</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、新建仓库，路径要为个人空间地址名，否则在同时推到gitee和github时会出现乱码<br>2、在博客所在的文件夹下安装 部署插件 $ cnpm install --save hexo-deployer-git<br>3、配置  _config.yml<br>    在该文件的最底部Deployment处<br>    deploy: <br><span class="hljs-built_in">type</span>: git <span class="hljs-comment">#每个冒号后面要加空格</span><br>        repo: gitee https仓库地址<br>        branch: master<br>4、部署到github上<br>     hexo d<br></code></pre></td></tr></table></figure><h2 id="B、hexo进阶设置"><a href="#B、hexo进阶设置" class="headerlink" title="B、hexo进阶设置"></a>B、<code>hexo</code>进阶设置</h2><h3 id="初始化文件的含义"><a href="#初始化文件的含义" class="headerlink" title="初始化文件的含义"></a>初始化文件的含义</h3><h4 id="1、node-modlues"><a href="#1、node-modlues" class="headerlink" title="1、node_modlues"></a>1、<code>node_modlues</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 存放 node依赖包 的文件夹，在js文件中可以直接导入使用其中的依赖包</span><br><span class="hljs-comment"># 运行</span><br>$ npm install <span class="hljs-comment">#指令时会将package.json中dependencies(依赖包)的内容下载到该文件夹下。</span><br></code></pre></td></tr></table></figure><h4 id="2、-config-yml"><a href="#2、-config-yml" class="headerlink" title="2、_config.yml"></a>2、<code>_config.yml</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置文件，可在该文件中配置大部分的参数。包括标题，作者，叙述，主题等等</span><br></code></pre></td></tr></table></figure><h4 id="3、scaffolds"><a href="#3、scaffolds" class="headerlink" title="3、scaffolds"></a>3、<code>scaffolds</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 模板文件夹，会在写入的文章中默认填充的一些内容。</span><br></code></pre></td></tr></table></figure><h4 id="4、source"><a href="#4、source" class="headerlink" title="4、source"></a>4、<code>source</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 存放用户资源的地方，_posts中就存放着我们写的文章。</span><br></code></pre></td></tr></table></figure><h4 id="5、themes"><a href="#5、themes" class="headerlink" title="5、themes"></a>5、<code>themes</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  主题文件夹，hexo会根据这个文件夹来生成静态页面。我们可以看到初始化后themes文件夹下有一个landscape文件夹，这就是我们现在默认使用的主题，这个配置在_config.yml里面进行配置</span><br></code></pre></td></tr></table></figure><h4 id="6、db-json"><a href="#6、db-json" class="headerlink" title="6、db.json"></a>6、<code>db.json</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 可以用于对文件的管理。</span><br></code></pre></td></tr></table></figure><h3 id="文件的打包"><a href="#文件的打包" class="headerlink" title="文件的打包"></a>文件的打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">实际上就是生成静态文件，`hexo`使用`hexo generate`来完成这个工作，可以简写为`hexo g`<br><br>静态文件是放在`public`文件夹中的，里面的内容是根据`<span class="hljs-built_in">source</span>`里面写的内容来打包的。<br></code></pre></td></tr></table></figure><h2 id="C、踩过的坑"><a href="#C、踩过的坑" class="headerlink" title="C、踩过的坑"></a>C、踩过的坑</h2><ol><li><p>若想要同时部署到<code>gitee</code>和<code>github</code>可以通过修改<code>_config.yml</code>文件实现。但如果码云建仓库的时候路径名不是自己的个人空间地址名时就不能正确显示样式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: git@github.com:Likianta/likianta.github.io.git<br>  repo: git@git.coding.net:Likianta/likianta.git <span class="hljs-comment"># 网址的大小写不限制</span><br>  branch: master<br></code></pre></td></tr></table></figure></li><li><p>部署到码云后，样式消失</p><p>码云官方文档：<a href="https://gitee.com/help/articles/4136#article-header1">https://gitee.com/help/articles/4136#article-header1</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">只要码云上博客的路径名是码云的个人空间地址名就不会出现这种情况</span><br><span class="hljs-comment"># 找到配置文件编辑 _config.yml</span><br><span class="hljs-comment"># root对应的值是编译跳转路径，将root值改成跟你码云里建仓库时的路径名一样就可以了，root默认值是 /</span><br><span class="hljs-attr">root:</span> <span class="hljs-string">/ZLBlog/</span> <span class="hljs-comment">#/</span><br><span class="hljs-string">备注：同时部署到gitee和github的时候root值保持默认即可。但只有当码云上博客的路径名是码云的个人空间地址名时部署到码云的博客才不会出现样式无法显示的情况</span><br></code></pre></td></tr></table></figure></li><li><p>全文显示问题。首页的文字一次性进行了全文显示，我们希望只显示一部分只需要在文字的中间加上<code>&lt;!--more--&gt;</code></p></li></ol><p><code>Hexo</code>搭建博客问题记录：<a href="https://zydarchen.gitee.io/20170707/4_hello_blog/">https://zydarchen.gitee.io/20170707/4_hello_blog/</a></p><p><code>CDN</code>加速博客：<a href="https://zydarchen.gitlab.io/20190417/27_cdn_for_hexo/">https://zydarchen.gitlab.io/20190417/27_cdn_for_hexo/</a></p><h2 id="D、next主题"><a href="#D、next主题" class="headerlink" title="D、next主题"></a>D、next主题</h2><p>更改配置文件的时候可以不clean、generate直接<code>hexo s</code></p><h3 id="标签-tags"><a href="#标签-tags" class="headerlink" title="标签 tags"></a>标签 <code>tags</code></h3><h3 id="分类categories"><a href="#分类categories" class="headerlink" title="分类categories"></a>分类<code>categories</code></h3><h3 id="Social-Media"><a href="#Social-Media" class="headerlink" title="Social Media"></a><code>Social Media</code></h3><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a><code>RSS</code></h3><h3 id="使用Justified-Gallery创建相册"><a href="#使用Justified-Gallery创建相册" class="headerlink" title="使用Justified Gallery创建相册"></a>使用Justified Gallery创建相册</h3>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
